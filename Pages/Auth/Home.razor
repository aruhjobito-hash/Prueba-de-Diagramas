@page "/home"
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="row">
    <div class="col-md-12">
        <div class="portlet light portlet-fit">


            <div class="header-grupo-plantilla">
                <div class="header-content">
                    <div class="caption mb-0">
                        <i class="icon-settings"></i>
                        <span class="titulo-seccion-plantilla">BIENVENIDO @DatoTrabajador[0] CARGO:@DatoTrabajador[1]  AREA:@DatoTrabajador[2] OTRO: @DatoTrabajador[3]</span>
                    </div>
                </div>

                <div class="header-content">                    
                    <div class="actions">
                        @* <button class="btn green">
                        Nuevo
                        <i class="fa fa-plus"></i>
                        </button>*@
                    </div>
                </div>
            </div>
@*
            <div class="bg-transparent">
                <input type="text" class="form-control search-input" placeholder="Buscar Perfil..." @oninput="" />
            </div>*@


            <div class="portlet-body blazor-content">
                <p>Selected Role: @selectedRole para: @iduser</p>
                <div style="padding: 30px;">

                    <div style="display: flex; height: 80px;width: 90px;">
                        <div style="height: 12px;"></div>
                        <div style="display: flex;flex-direction: column;">
                            <div style="position: absolute; left:67px;bottom:58px;">
                                <div class="spin" style="height: 25px;display: grid;place-content: center;">
                                    <i class="bi bi-gear-wide-connected" style="font-size: 25px;color: rgb(224, 178, 62);"></i>
                                </div>
                            </div>
                            <div class="spin" style="display: grid;place-content: center;">
                                <i class="bi bi-gear-wide-connected" style="font-size: 55px;color: rgb(224, 178, 62);"></i>
                            </div>
                        </div>
                        <div style="position: absolute; left:82px;bottom:73px;">
                            <div class="spin" style="display: grid;place-content: center;">
                                <i class="bi bi-gear-wide-connected" style="font-size: 35px;color: rgb(224, 178, 62);"></i>
                            </div>
                        </div>

                    </div>
                    <div style="text-align: center;font-weight: 500;"> Procesando</div>

                </div>

            </div>
        </div>
    </div>
</div>

@if (mostrarModalNuevo)
{
    <select @bind="selectedRole">
        @foreach (var role in roles)
        {
            <option value="@role">@role</option>
        }
    </select>
}


@code {
    private List<string> roles = new();
    private List<string> IdUser = new();
    private List<string> DatoTrabajador = new();
    private string selectedRole;
    private string iduser;
    private bool mostrarModalNuevo;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Get all role claims
            roles = user.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();
            // Get all DataTrabajador
            DatoTrabajador = user.Claims
                .Where(c => c.Type == ClaimTypes.UserData)
                .Select(c => c.Value)
                .ToList();

            if (roles.Any())
            {
                selectedRole = roles.First();
            }
            IdUser = user.Claims.Where(c => c.Type == ClaimTypes.Name).Select(c => c.Value).ToList();
            if (IdUser.Any()){
                iduser = IdUser.First();
                SaveData(iduser);
            }
        }
        
    }
    private async Task SaveData(string iduser)
    {
        /* Almacenamos los datos del trabajador (Usuario) en el localstorage */
        await localStorage.SetItemAsync("IdUser", iduser);
        await localStorage.SetItemAsync("Roles", roles);
        await localStorage.SetItemAsync("UserData", DatoTrabajador); 
    }
    private async Task AbrirModalNuevo()
    {       

        mostrarModalNuevo = true;
    }
}
