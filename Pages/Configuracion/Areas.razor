@page "/Areas"
@using Models.Sistema
@using Models.Configuracion
@using Clases.Sistema
@inject HttpClient Http
@inherits MainLayout
@using System.Security.Claims
@using LeonXIIICore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClaimsService ClaimsService
@inject LeonXIIICore.Controllers.Configuracion.AreasController AreasService
@inject IJSRuntime JSRuntime
@* @using LeonXIIICore.Models.Sistema *@

<div class="row">
    <div class="col-md-12">
        <div class="portlet light portlet-fit">
            <div class="header-grupo-plantilla">
                <div class="header-content">
                    <div class="caption mb-0">
                        <i class="icon-settings"></i>
                        <span class="titulo-seccion-plantilla">
                            Áreas
                        </span>
                    </div>
                </div>

                <div class="header-content">
                    <div class="actions">
                        @* <button class="btn green">
                            Nuevo
                            <i class="fa fa-plus"></i>
                        </button>*@
                    </div>
                </div>
            </div>

            <div class="blazor-content portlet-body">
                <div class="portlet-body">
                    <div class="toolbar-search">
                        <div class="floating-label">
                            <input type="search" class="mat-input" id="buscarArticulo" placeholder=" " />
                            <label for="buscarArticulo">Buscar</label>
                        </div>
                        <div class="toolbar-actions">
                            <button class="btnbla blazor-button-outline" title="Actualizar">
                                <i class="fa fa-refresh"></i>
                            </button>
                            <span class="toolbar-label">Actualizar</span>
                            @* <button class="icon-btn" title="Filtros">
                                <i class="fa fa-filter"></i>
                            </button>
                            <span class="toolbar-label">Filtros</span> *@
                            <button type="button" class="btnbla blazor-button-outline primary" @onclick="ShowCreateModal">
                                <i class="fa fa-plus"></i> Nueva Área
                            </button>
                        </div>
                    </div>



         @*            <div class="portlet light"> *@
                        <div class="portlet-body">
                            
                            <table class="blazor-tabla-requerimientos" id="sample_1" role="grid" aria-describedby="sample_1_info">
                                <thead>
                                    <tr>
                                        <th>Id Área</th>
                                        <th>Área</th>
                                        @* <th>Centro de Costo</th> *@
                                        <th>Estado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ccost in Area)
                                    {
                                        <tr>
                                            <td>@ccost.IdArea</td>
                                            <td>@ccost.Area</td>
                                            @* <td>@ccost.Valor</td> *@
                                        <td>
                                            <div class="acciones-btns">
                                                @((MarkupString)(ccost.Activo == "0"
                                                    ? "<span class=\"label label-danger\">Inactivo</span>"
                                                    : "<span class=\"label label-success\">Activo</span>"))
                                            </div>
                                        </td>

                                            <td>
                                                <div class="acciones-btns">
                                                <button class="btn btn-outline btn-circle btn blue-hoki" @onclick="() => ShowEditModal(ccost)">
                                                    <i class="fa fa-edit"></i> Edit
                                                </button>
                                                @if (@ccost.Activo == "1")
                                                {
                                                    <button type="button" @onclick="() => ShowOnOffModal(ccost)" class="btn btn-outline btn-circle dark btn-sm red">
                                                        <i class="fa fa-trash-o"></i> Desactivar
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button type="button" @onclick="() => ShowOnOffModal(ccost)" class="btn btn-outline btn-circle dark btn-sm green-jungle">
                                                        <i class="fa fa-trash-o"></i> Activar
                                                    </button>
                                                }
                                                @* <button class="btn btn-outline btn-circle dark btn-sm black" @onclick="() => DeleteArea(ccost)">
                                                    <i class="fa fa-trash-o"></i> Eliminar
                                                </button> *@
                                            </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
@*                     </div> *@
                </div>
            </div>
            @* <div class="blazor-content portlet-body">
                <div class="portlet-body">
                    Contenido de la página @dato
                </div>
            </div> *@
        </div>
    </div>
</div>
@if (isEditModalVisible)
{
    <div id="DocModal" class="modal show"  role="dialog" style="background-color: rgba(0,0,0,0.5);z-index: 10051;">
        <div class="modal-dialog" >
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" @onclick="HideEditModal">×</button>
                    <h4 class="modal-title">@modalTitle</h4>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="operacion">Codigo de Área</label>
                            <input type="text" id="Codigo" class="form-control" @bind="SelectedArea.IdArea" disabled/>
                        </div>
                        <div class="form-group">
                            <label for="operacion">Área</label>
                            <input type="text" id="Codigo" class="form-control" @bind="SelectedArea.Area" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    @* <div class="acciones-btns"> *@
                    @* <button type="button" class="btn red" @onclick="SaveChanges">Aceptar</button> *@
                    <button type="button" class="btn btn-outline  red" @onclick="SaveChanges">Registrar</button>
                    <button type="button" class="btn btn-outline dark " @onclick="HideEditModal">Salir</button>
                    @* </div> *@
                </div>
            </div>
        </div>
    </div>
}

@if (isMensConfVisible)
{
    <div class="modal fade in" id="basic" tabindex="-1" role="basic" aria-hidden="true" style="display: block; padding-right: 15px;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button @onclick="HideMensConfModal" type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                    <h4 class="modal-title">Confirmación</h4>
                </div>
                <div class="modal-body"> ¿Estás seguro de que deseas @(SelectedArea.Activo == "0" ? "desactivar" : "activar") el centro de costo del área ? </div>
                <div class="modal-footer">
                    <div class="acciones-btns">
                    <button @onclick="OnOffAreaAsync"
                            type="button"
                            class="btn btn-outline btn-circle dark btn-sm @(SelectedArea.Activo == "0" ? "red" : "green-jungle")"
                            data-dismiss="modal">
                        Sí, @(SelectedArea.Activo == "0" ? "Desactivar" : "Activar")
                    </button>
                    <button @onclick="HideMensConfModal" type="button" class="btn btn-outline btn-circle dark btn-sm red" data-dismiss="modal">Cancelar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private string dato;
    private bool isEditModalVisible = false;
    private bool isMensConfVisible = false;
    private int currentOption = 1; // 1 para crear, 2 para editar, 3 para eliminar
    private string modalTitle = "Editar Área";
    private List<AreasModel> Area = new List<AreasModel>();
    private requestAreasModel SelectedArea = new requestAreasModel();
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ClaimsService.InitializeAsync();
        // dato = ClaimsService.GetDatoTrabajadorByIdUser("SidArea");
        dato = ClaimsService.GetDatoTrabajadorByIdUser("SIdUser"); // works case-insensitively
        await LoadAreas();
        StateHasChanged(); // <-- Fuerza el refresco para que el botón se deshabilite correctamente
    }

    private async Task LoadAreas()
    {
        try
        {
            Area = await AreasService.LoadAreasDataAsync();
            if (Area == null)
            {
                Area = new List<AreasModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las agencias: {ex.Message}");
            Area = new List<AreasModel>();
        }
    }



    private void HideEditModal()
    {
        isEditModalVisible = false;
    }
    private async Task ShowCreateModal()
    {
        SelectedArea = new requestAreasModel
            {
                IdArea = "00",
                Area = string.Empty,
                IdUser = dato,
                Activo = "1"
            };
        modalTitle = "Crear Área";
        isEditModalVisible = true;
        currentOption = 1;
    }
    private void ShowEditModal(AreasModel model)
    {
        SelectedArea = new requestAreasModel
            {
                IdArea = model.IdArea,
                Area=model.Area,
                IdUser = dato,
                Activo = "1"
            };
        modalTitle = "Editar Área";
        isEditModalVisible = true;
        currentOption = 2; // Opción para editar
    }
    private async Task SaveChanges()
    {
        var request = new requestAreasModel
            {
                IdArea = SelectedArea.IdArea,
                Area = SelectedArea.Area,
                IdUser = dato,
                Activo = SelectedArea.Activo
            };

        var AreaData = await AreasService.Create_Update_Delete_AreaDataAsync(request, currentOption);
        var firstAreaData = AreaData.FirstOrDefault();
        if (firstAreaData != null && firstAreaData.bEstado == "1")
        {
            if (currentOption == 1) // Insertar
            {
                await JSRuntime.InvokeVoidAsync("alert", "Área creada exitosamente.");
            }
            else if (currentOption == 2) // Actualizar
            {
                await JSRuntime.InvokeVoidAsync("alert", "Área actualizada exitosamente.");
            }

        }
        else
        {
            message = currentOption == 1 ? "Error al crear el registro" : currentOption == 2 ? "Error al actualizar el registro" : "Error al eliminar el registro";
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        await LoadAreas();
        HideEditModal();
    }
    private async Task ShowOnOffModal(AreasModel Area)
    {
        SelectedArea = new requestAreasModel
            {
                IdArea = Area.IdArea,
                Area = Area.Area,
                IdUser = dato,
                Activo = Area.Activo == "0" ? "1" : "0"
            };
        isMensConfVisible = true;
    }
    private void HideMensConfModal()
    {
        isMensConfVisible = false;
    }
    private async Task OnOffAreaAsync()
    {
        var AreaData = await AreasService.OnOffAreaAsync(SelectedArea);
        var firstAreaData = AreaData.FirstOrDefault();
        if (firstAreaData != null && firstAreaData.bEstado == "1")
        {
            // Recargar el DataTable de acciones
            await LoadAreas();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al actualizar el registro");
        }
        // Refrescar la UI
        StateHasChanged();
        HideMensConfModal();
    }
 
    private async Task DeleteArea(AreasModel model)
    {
        var request = new requestAreasModel
            {
                IdArea = model.IdArea,
                Area=model.Area,
                IdUser = dato,
                Activo = model.Activo
            };

        var AreaData = await AreasService.Create_Update_Delete_AreaDataAsync(request, 3);
        var firstAreaData = AreaData.FirstOrDefault();
        if (firstAreaData != null && firstAreaData.bEstado == "1")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Registro eliminado correctamente");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el registro");
        }
        await LoadAreas();
    }
}
