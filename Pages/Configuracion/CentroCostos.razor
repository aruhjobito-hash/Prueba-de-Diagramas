@page "/CentroCosto"
@using Clases.Sistema
@using LeonXIIICore.Controllers.Configuracion
@using Models.Configuracion
@using Models.Sistema
@inject HttpClient Http
@inherits MainLayout
@using System.Security.Claims
@using LeonXIIICore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClaimsService ClaimsService
@inject LeonXIIICore.Controllers.Sistema.AgenciaController AgenciaService
@inject AreasController AreasService
@inject LeonXIIICore.Controllers.Configuracion.CentroCostoController CentroCostosService
@inject IJSRuntime JSRuntime
@* @using LeonXIIICore.Models.Sistema *@

<div class="row">
    <div class="col-md-12">
        <div class="portlet light portlet-fit">
            <div class="header-grupo-plantilla">
                <div class="header-content">
                    <div class="caption mb-0">
                        <i class="icon-settings"></i>
                        <span class="titulo-seccion-plantilla">
                            Centro de Costos
                        </span>
                    </div>
                </div>

                <div class="header-content">
                    <div class="actions">
                        @* <button class="btn green">
                            Nuevo
                            <i class="fa fa-plus"></i>
                        </button>*@
                    </div>
                </div>
            </div>
            <div class="blazor-content portlet-body">
                <div class="portlet-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                @* <label for="agencia">Agencia</label> *@
                                <select id="agencia" class="bs-select form-control" @onchange="OnAgenciaChanged">
                                    <option value="00">SELECCIONE UNA AGENCIA</option>
                                    @if (Agencias != null && Agencias.Any())
                                    {
                                        @foreach (var agencia in Agencias)
                                        {
                                            <option value="@agencia.Idagencia">@agencia.Agencia</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="">No hay agencias disponibles</option>
                                    }
                                </select>

                            </div>
                        </div>
                        <div class="col-md-4">
                            @* <div class="form-group">
                                <input type="text" class="form-control search-input" placeholder="Buscar Agencia/Area..." />
                            </div> *@
                        </div>
                        @* <div class="col-md-2">
                            <div class="form-group">

                                <button type="button" class="btn green btn-lg-outline"><i class="fa fa-plus"></i> Nuevo Centro de Costo</button>


                            </div>
                        </div>
                        <div class="col-md-2">
                            <input type="text" class="form-control" placeholder="Buscar Agencia/Area...">
                        </div> *@

                        <form class="form-inline" role="form">
                            <div class="form-group">
                                @* <button type="button" class="btn green btn-lg-outline" @onclick="ShowCreateModal"><i class="fa fa-plus"></i> Nuevo Centro de Costo</button> *@
                                <button type="button" class="btn green btn-lg-outline" @onclick="ShowCreateModal" disabled="@IsAgregarDisabled">
                                    <i class="fa fa-plus"></i> Nuevo Centro de Costo
                                </button>

                            </div>
                            <div class="form-group">
                                <div class="input-icon">
                                    <i class="icon-magnifier"></i>
                                    <input type="password" class="form-control" id="exampleInputPassword42" placeholder="Buscar Agencia/Area...">
                                </div>
                            </div>

                        </form>
                    </div>

                    <div class="portlet light">
                        <div class="portlet-title">
                            <div class="caption font-dark">
                                <i class="icon-settings font-dark"></i>
                                <span class="caption-subject bold uppercase">@GetDetalleAreasTexto()</span>
                            </div>
                            <div class="tools"> </div>
                        </div>
                        <div class="portlet-body">
                            <table class="table table-striped table-bordered table-hover dataTable no-footer dtr-inline" id="sample_1" role="grid" aria-describedby="sample_1_info">
                                <thead>
                                    <tr>
                                        @*  <th>Agencia</th> *@
                                        <th>Área</th>
                                        <th>Centro de Costo</th>
                                        <th>Estado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ccost in CentroCosto)
                                    {
                                        <tr>
                                            @*  <td>@ccost.IdAgencia</td> *@
                                            <td>@ccost.Area</td>
                                            <td>@ccost.Valor</td>
                                            <td>
                                                @((MarkupString)(ccost.Activo == "0"
                                                    ? "<span class=\"badge badge-danger\">INACTIVO</span>"
                                                    : "<span class=\"badge badge-success\">ACTIVO</span>"))
                                            </td>
                                            <td>
                                                <button class="btn btn-outline btn-circle btn-sm purple" @onclick="() => ShowEditModal(ccost)">
                                                    <i class="fa fa-edit"></i> Edit
                                                </button>
                                                @if (@ccost.Activo == "1")
                                                {
                                                    <button type="button" @onclick="() => ShowOnOffModal(ccost)" class="btn btn-outline btn-circle dark btn-sm red">
                                                        <i class="fa fa-trash-o"></i> Desactivar
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button type="button" @onclick="() => ShowOnOffModal(ccost)" class="btn btn-outline btn-circle dark btn-sm green-jungle">
                                                        <i class="fa fa-trash-o"></i> Activar
                                                    </button>
                                                }
                                                <button class="btn btn-outline btn-circle dark btn-sm black" @onclick="() => DeleteCentroCosto(ccost)">
                                                    <i class="fa fa-trash-o"></i> Eliminar
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            @* <div class="blazor-content portlet-body">
                <div class="portlet-body">
                    Contenido de la página @dato
                </div>
            </div> *@
        </div>
    </div>
</div>
@if (isEditModalVisible)
{
    <div id="DocModal" class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" @onclick="HideEditModal">×</button>
                    <h4 class="modal-title">@modalTitle</h4>
                </div>
                <div class="modal-body">
                    <form>

                      
                        <div class="form-group">
                            <label>AGENCIA</label>
                            <span class="form-control-plaintext">@GetAgenciaNombre(idagencia)</span>
                        </div>
                        <div class="form-group">
                            <label for="area">Área</label>
                            <select id="idarea" class="form-control" @bind="SelectedCentroCosto.IdArea">
                                <option value="00">Seleccione un área</option>
                                @if (Areas !=null && Areas.Any())
                                {
                                    @foreach (var area in Areas)
                                    {
                                        <option value="@area.IdArea">@area.Area</option>
                                    }
                                }
                                else
                                {
                                    <option value="">NO HAY AREAS DISPONIBLES</option>
                                }

                            </select>
                        </div>
                        <div class="form-group">
                            <label for="operacion">Código</label>
                            <input type="text" id="Codigo" class="form-control" @bind="SelectedCentroCosto.Valor" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    @* <button type="button" class="btn red" @onclick="SaveChanges">Aceptar</button> *@
                    <button type="button" class="btn red" @onclick="SaveChanges">Registrar</button>
                    <button type="button" class="btn dark btn-outline" @onclick="HideEditModal">Salir</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isMensConfVisible)
{
    <div class="modal fade in" id="basic" tabindex="-1" role="basic" aria-hidden="true" style="display: block; padding-right: 15px;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button @onclick="HideMensConfModal" type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                    <h4 class="modal-title">Confirmación</h4>
                </div>
                <div class="modal-body"> ¿Estás seguro de que deseas @(SelectedCentroCosto.Activo == "0" ? "desactivar" : "activar") el centro de costo del área ? </div>
                <div class="modal-footer">
                    <button @onclick="OnOffCentroCostoAsync" type="button" class="btn btn-outline btn-circle btn-sm blue" data-dismiss="modal">Sí, @(SelectedCentroCosto.Activo == "0" ? "Desactivar" : "Activar")</button>
                    <button @onclick="HideMensConfModal" type="button" class="btn btn-outline btn-circle dark btn-sm red" data-dismiss="modal">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private string dato;
    private string idagencia;
    private string idagenciaS;
    private bool isEditModalVisible = false;
    private bool isMensConfVisible = false;
    private int currentOption = 1; // 1 para crear, 2 para editar, 3 para eliminar
    private string modalTitle = "Editar Centro de Costo";
    private List<AgenciasDBModel> Agencias = new List<AgenciasDBModel>();
    private List<AgenciasDBModel> AgenciasS = new List<AgenciasDBModel>();
    private List<AreasModel> Areas = new List<AreasModel>();
    private List<CentroCostosModel> CentroCosto = new List<CentroCostosModel>();
    private RequestCentroCostosModel SelectedCentroCosto = new RequestCentroCostosModel();
    private bool IsAgregarDisabled => idagencia == "00" || string.IsNullOrEmpty(idagencia);
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ClaimsService.InitializeAsync();
        await LoadAgencias();

        dato = ClaimsService.GetDatoTrabajadorByIdUser("SidArea");

        idagencia = Agencias.FirstOrDefault()?.Idagencia ?? "00";
        await LoadCentroCosto(idagencia);

        StateHasChanged(); // <-- Fuerza el refresco para que el botón se deshabilite correctamente
    }


    private async Task LoadAgencias()
    {
        try
        {
            var agencias = await AgenciaService.LoadAgenciaDataAsync();
            Agencias = agencias ?? new List<AgenciasDBModel>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las agencias: {ex.Message}");
            Agencias = new List<AgenciasDBModel>();
        }
    }

    private async Task LoadAreas()
    {
        try
        {
            Areas = await AreasService.LoadAreasDataAsync();
            if (Areas == null)
            {
                Areas = new List<AreasModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las agencias: {ex.Message}");
            Areas = new List<AreasModel>();
        }
    }

    public async Task LoadCentroCosto(string idagencia)
    {
        try
        {
            CentroCosto = await CentroCostosService.LoadCentroCostoDataAsync(idagencia);
            if (CentroCosto == null || CentroCosto.Count==0)
            {
                CentroCosto = new List<CentroCostosModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los centros de costos: {ex.Message}");
            CentroCosto = new List<CentroCostosModel>();
        }
    }

    private string GetDetalleAreasTexto()
    {
        if (idagencia == "00" || string.IsNullOrEmpty(idagencia))
            return "Detalle de todas las áreas";
        var agencia = Agencias.FirstOrDefault(a => a.Idagencia == idagencia);
        return agencia != null
            ? $"Detalle de áreas de la agencia {agencia.Agencia}"
            : "Detalle de áreas";
    }
    private async Task OnAgenciaChanged(ChangeEventArgs e)
    {
        idagencia = e.Value?.ToString();
        await LoadCentroCosto(idagencia);
    }
    private void HideEditModal()
    {
        isEditModalVisible = false;
    }
    private async Task ShowCreateModal()
    {
        // await LoadAgencias();
        await LoadAreas();

        // Usa la agencia seleccionada en el general
        idagenciaS = idagencia;
        SelectedCentroCosto = new RequestCentroCostosModel
            {
                IdAgencia = idagenciaS,
                IdArea = "00",
                Valor = string.Empty,
                Activo="1"
            };
        modalTitle = "Crear Centro de Costo";
        isEditModalVisible = true;
        currentOption = 1;
    }
    private void ShowEditModal(CentroCostosModel model)
    {
        SelectedCentroCosto = new RequestCentroCostosModel
            {
                IdArea = model.IdArea,
                IdAgencia = model.IdAgencia,
                Valor = model.Valor,
                Activo=  "1"
            };
        modalTitle = "Editar Centro de Costo";
        isEditModalVisible = true;
        currentOption = 2; // Opción para editar
    }
    private async Task SaveChanges()
    {
        var request = new RequestCentroCostosModel
            {
                IdArea = SelectedCentroCosto.IdArea,
                IdAgencia = SelectedCentroCosto.IdAgencia,
                Valor = SelectedCentroCosto.Valor,
                Activo = SelectedCentroCosto.Activo
            };

        var CentroCostoData = await CentroCostosService.Create_Update_Delete_CentroCostoDataAsync(request, currentOption);
        var firstCentroCostoDataData = CentroCostoData.FirstOrDefault();
        if (firstCentroCostoDataData != null && firstCentroCostoDataData.bEstado == "1")
        {
            if (currentOption == 1) // Insertar
            {
                await JSRuntime.InvokeVoidAsync("alert", "Centro de costo creado exitosamente.");
            }
            else if (currentOption == 2) // Actualizar
            {
                await JSRuntime.InvokeVoidAsync("alert", "Centro de costo actualizado exitosamente.");
            }
           
        }
        else
        {
            message = currentOption == 1 ? "Error al crear el registro" : currentOption == 2 ? "Error al actualizar el registro" : "Error al eliminar el registro";
            await JSRuntime.InvokeVoidAsync("alert", message);
        }

        await LoadCentroCosto(idagencia);
        HideEditModal();
    }
    private async Task ShowOnOffModal(CentroCostosModel CentroCosto)
    {
        SelectedCentroCosto = new RequestCentroCostosModel
            {
                IdArea = CentroCosto.IdArea,
                IdAgencia = CentroCosto.IdAgencia,
                Valor="00",
                Activo = CentroCosto.Activo == "0" ? "1" : "0"
            };
        isMensConfVisible = true;
    }
    private void HideMensConfModal()
    {
        isMensConfVisible = false;
    }
    private async Task OnOffCentroCostoAsync()
    {
        var CentroCostoData = await CentroCostosService.OnOffCentroCostoAsync(SelectedCentroCosto);
        var firstCentroCostoData = CentroCostoData.FirstOrDefault();
        if (firstCentroCostoData != null && firstCentroCostoData.bEstado == "1")
        {
            // Recargar el DataTable de acciones
            await LoadCentroCosto(idagencia);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al actualizar el registro");
        }
        // Refrescar la UI
        StateHasChanged();
        HideMensConfModal();
    }
    private string GetAgenciaNombre(string id)
    {
        if (id == "00" || string.IsNullOrEmpty(id))
            return "Sin agencia seleccionada";
        var agencia = Agencias.FirstOrDefault(a => a.Idagencia == id);
        return agencia?.Agencia ?? "Agencia no encontrada";
    }
    private async Task DeleteCentroCosto(CentroCostosModel model)
    {
        var request = new RequestCentroCostosModel
            {
                IdArea = model.IdArea,
                IdAgencia = model.IdAgencia,
                Valor = model.Valor,
                Activo = model.Activo
            };

        var CentroCostoData = await CentroCostosService.Create_Update_Delete_CentroCostoDataAsync(request, 3);
        var firstCentroCostoData = CentroCostoData.FirstOrDefault();
        if (firstCentroCostoData != null && firstCentroCostoData.bEstado == "1")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Registro eliminado correctamente");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el registro");
        }
        await LoadCentroCosto(idagencia);
    }
}
