@page "/MantOperacion"
@inject LeonXIIICore.Controllers.Contabilidad.OperacionClass OperacionService
@inject IJSRuntime JSRuntime
@using LeonXIIICore.Models.Contabilidad

<div class="portlet light portlet-fit portlet-datatable ">
    <div class="portlet-title">
        <div class="caption font-dark">
            <i class="icon-settings font-dark"></i>
            <span class="caption-subject bold uppercase">Mantenedor Operaciones</span>
        </div>
        <div class="tools"> </div>
    </div>
    <div class="portlet-body">
        <div class="tabbable-line">
            <ul class="nav nav-tabs nav-tabs-lg">
                <li class="active">
                    <a href="#tab_1" data-toggle="tab" aria-expanded="true"> Nivel 1 </a>
                </li>
                <li class="">
                    <a href="#tab_2" data-toggle="tab" aria-expanded="false">
                        Nivel 2
                        @* <span class="badge badge-success">4</span> *@
                    </a>
                </li>
                <li class="">
                    <a href="#tab_3" data-toggle="tab" aria-expanded="false">
                        Nivel 3
                        @* <span class="badge badge-success">4</span> *@
                    </a>
                </li>

            </ul>
            <div class="tab-content">
                <div class="tab-pane active" id="tab_1">
                    <div class="row">
                        <div class="col-md-12">
                            <!-- BEGIN EXAMPLE TABLE PORTLET-->
                            <div class="portlet light ">
                                <div class="portlet-title">
                                    <div class="caption font-dark">
                                        <i class="icon-settings font-dark"></i>
                                        <span class="caption-subject bold uppercase">Operaciones</span>
                                    </div>
                                    <div class="tools"> </div>
                                </div>
                                <div class="portlet-body">
                                    <div class="table-toolbar">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="btn-group">
                                                    <button id="sample_editable_1_new" class="btn sbold green" @onclick="ShowCreateModal">
                                                        Agregar Operación
                                                        <i class="fa fa-plus"></i>
                                                    </button>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <table class="table table-striped table-bordered table-hover table-checkable order-column" id="sample_1">
                                        <thead>
                                            <tr>
                                                @* <th>
                                                    <input type="checkbox" class="group-checkable" data-set="#sample_1 .checkboxes" />
                                                </th> *@
                                                <th>Seleccion</th>
                                                <th> IdOpe </th>
                                                <th> Operacion </th>
                                                <th> Nivel </th>
                                                <th> Acciones </th>

                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var operacion in Operaciones)
                                            {
                                                <tr class="odd gradeX">
                                                    <td>
                                                        @* <input type="checkbox" class="checkboxes" value="@operacion.IdOpe" @onchange="() => OnCheckboxChanged(operacion.IdOpe)" /> *@
                                                        <input type="checkbox" class="checkboxes"
                                                        checked="@operacion.IsSelected"
                                                        @onchange="(e) => OnCheckboxChanged(operacion, e.Value)" />
                                                    </td>
                                                    <td>@operacion.IdOpe</td>
                                                    <td>@operacion.Operacion</td>
                                                    <td>@operacion.Nivel</td>
                                                    <td>
                                                        <button class="btn btn-outline btn-circle btn-sm purple" @onclick ="() => ShowEditModal(operacion)">
                                                            <i class="fa fa-edit"></i> Edit
                                                        </button>
                                                        <button class="btn btn-outline btn-circle dark btn-sm green-dark" @onclick="() => ShowDocModal(operacion)">
                                                            <i class="fa fa-file-o"></i> Documentos
                                                        </button>
                                                        <button class="btn btn-outline btn-circle dark btn-sm black">
                                                            <i class="fa fa-trash-o"></i> Delete
                                                        </button>

                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>onchange
                            <!-- END EXAMPLE TABLE PORTLET-->
                            <!-- BEGIN EXAMPLE TABLE PORTLET-->

                        </div>
                    </div>
                </div>
                <div class="tab-pane" id="tab_2">
                    <div class="row">
                        <div class="col-md-12">
                            <!-- BEGIN EXAMPLE TABLE PORTLET-->
                            <div class="portlet light ">
                                <div class="portlet-title">
                                    <div class="caption font-dark">
                                        <i class="icon-settings font-dark"></i>
                                        <span class="caption-subject bold uppercase">
                                            @if (!string.IsNullOrEmpty(selectedOperacion?.IdOpe) && !string.IsNullOrEmpty(selectedOperacion?.Operacion) )
                                            {
                                                @($"{selectedOperacion.IdOpe} - {selectedOperacion.Operacion}")
                                            }
                                            else
                                            {
                                                <span>Seleccione una operación</span>
                                            }
                                        </span>

                                    </div>
                                    <div class="tools"> </div>
                                </div>
                                <div class="portlet-body">
                                    <div class="table-toolbar">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="btn-group">
                                                    <button id="sample_editable_1_new" class="btn sbold green" @onclick="ShowCreateModal">
                                                        Agregar Operación Hijo
                                                        <i class="fa fa-plus"></i>
                                                    </button>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <table class="table table-striped table-bordered table-hover table-checkable order-column" id="sample_1">
                                        <thead>
                                            <tr>
                                                <th>Seleccion</th>
                                                <th> IdOpe </th>
                                                <th> Operacion </th>
                                                <th> Nivel </th>
                                                <th> Acciones </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (OperacionesTab2.Any())
                                            {
                                                @foreach (var operacion in OperacionesTab2)
                                                {
                                                    <tr>
                                                        <td>
                                                            @* <input type="checkbox" class="checkboxes" value="@operacion.IdOpe" @onchange="() => OnCheckboxChanged(operacion.IdOpe)" /> *@
                                                            <input type="checkbox" class="checkboxes"
                                                            checked="@operacion.IsSelected2"
                                                            @onchange="(e) => OnCheckboxChangedNivel3(operacion, e.Value)" />
                                                        </td>
                                                        <td>@operacion.IdOpeHijo</td>
                                                        <td>@operacion.Operacion</td>
                                                        <td>@operacion.Nivel</td>
                                                        <td>
                                                            <button class="btn btn-outline btn-circle btn-sm purple" @onclick="() => ShowEditModal(operacion)">
                                                                <i class="fa fa-edit"></i> Edit
                                                            </button>
                                                            <button class="btn btn-outline btn-circle dark btn-sm green-dark">
                                                                <i class="fa fa-file-o"></i> Documentos
                                                            </button>
                                                            <button class="btn btn-outline btn-circle dark btn-sm black">
                                                                <i class="fa fa-trash-o"></i> Delete
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="4" class="text-center">No se encontraron datos</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <!-- END EXAMPLE TABLE PORTLET-->
                            <!-- BEGIN EXAMPLE TABLE PORTLET-->

                        </div>
                    </div>

                </div>
                <div class="tab-pane" id="tab_3">
                    <div class="row">
                        <div class="col-md-12">
                            <!-- BEGIN EXAMPLE TABLE PORTLET-->
                            <div class="portlet light ">
                                <div class="portlet-title">
                                    <div class="caption font-dark">
                                        <i class="icon-settings font-dark"></i>
                                        <span class="caption-subject bold uppercase">
                                            @if (!string.IsNullOrEmpty(selectedOperacion2?.IdOpe) && !string.IsNullOrEmpty(selectedOperacion2?.Operacion) )
                                            {
                                                @($"{selectedOperacion2.IdOpe} - {selectedOperacion2.Operacion}")
                                            }
                                            else
                                            {
                                                <span>Seleccione una operación</span>
                                            }
                                        </span>

                                    </div>
                                    <div class="tools"> </div>
                                </div>
                                <div class="portlet-body">
                                    <div class="table-toolbar">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="btn-group">
                                                    <button id="sample_editable_1_new" class="btn sbold green" @onclick="ShowCreateModal">
                                                        Agregar Operación Hijo
                                                        <i class="fa fa-plus"></i>
                                                    </button>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <table class="table table-striped table-bordered table-hover" id="sample_1">
                                        <thead>
                                            <tr>
                                                <th> IdOpe </th>
                                                <th> Operacion </th>
                                                <th> Nivel </th>
                                                <th> Acciones </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (OperacionesTab3.Any())
                                            {
                                                @foreach (var operacion in OperacionesTab3)
                                                {
                                                    <tr>
                                                        <td>@operacion.IdOpeHijo</td>
                                                        <td>@operacion.Operacion</td>
                                                        <td>@operacion.Nivel</td>
                                                        <td>
                                                            <button class="btn btn-outline btn-circle btn-sm purple" @onclick="() => ShowEditModal(operacion)">
                                                                <i class="fa fa-edit"></i> Edit
                                                            </button>
                                                            <button class="btn btn-outline btn-circle dark btn-sm green-dark">
                                                                <i class="fa fa-file-o"></i> Documentos
                                                            </button>
                                                            <button class="btn btn-outline btn-circle dark btn-sm black">
                                                                <i class="fa fa-trash-o"></i> Delete
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="4" class="text-center">No se encontraron datos</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <!-- END EXAMPLE TABLE PORTLET-->
                            <!-- BEGIN EXAMPLE TABLE PORTLET-->

                        </div>
                    </div>

                </div>

            </div>
        </div>
    </div>
</div>

@if (isEditModalVisible)
{
    <div id="editModal" class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" @onclick="HideEditModal">×</button>
                    <h4 class="modal-title">@modalTitle</h4>
                </div>
                <div class="modal-body">
                    <div class="tabbable-line">
                        <ul class="nav nav-tabs nav-tabs-lg">
                            <li class="@(ActiveTab == "tab_datos_1" ? "active" : "")">
                                <a href="#tab_datos_1" data-toggle="tab" aria-expanded="true" @onclick="() => SetActiveTab(ActiveTab)"> Datos de la Operación </a>
                            </li>
                            <li class="@(ActiveTab == "tab_datos_2" ? "active" : "")">
                                <a href="#tab_datos_2" data-toggle="tab" aria-expanded="false" @onclick="() => SetActiveTab(ActiveTab)" style="@(IsTabDatos2Enabled ? "" : "pointer-events: none; color: #ccc;")">
                                    Tipos de Cuentas Afectadas

                                </a>
                            </li>

                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane @(ActiveTab == "tab_datos_1" ? "active" : "")" id="tab_datos_1">
                                <div class="row">
                                    <div class="col-md-12">
                                        <form>
                                            <div class="form-group">
                                                <label for="idOperacion">ID Operación</label>
                                                <input type="text" id="idOperacion" class="form-control" @bind="selectedOperacion.IdOpe" disabled />
                                            </div>
                                            <div class="form-group">
                                                <label for="operacion">Operación</label>
                                                <input type="text" id="operacion" class="form-control" @bind="selectedOperacion.Operacion" />
                                            </div>
                                            <div class="form-group">
                                                <label for="tipoOperacion">Tipo de Operación</label>
                                                <select id="tipoOperacion" class="form-control" @bind="selectedOperacion.IdTipOpe">
                                                    <option value="">Seleccione un tipo</option>
                                                    @if (TiposOperacion != null && TiposOperacion.Any())
                                                    {
                                                        @foreach (var tipo in TiposOperacion)
                                                        {
                                                            <option value="@tipo.IdTipOpe">@tipo.Descripcion</option>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <option value="">No hay tipos disponibles</option>
                                                    }
                                                </select>
                                            </div>

                                            <div class="form-group">
                                                <label for="elemento">Elemento</label>
                                                <input type="text" id="elemento" class="form-control" @bind="selectedOperacion.Elemento" />
                                            </div>

                                            <div class="form-group">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <label class="form-label">Moneda</label>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="monedaSoles" @bind="MonedaSoles" />
                                                            <label class="form-check-label" for="monedaSoles">Soles</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="monedaDolares" @bind="MonedaDolares" />
                                                            <label class="form-check-label" for="monedaDolares">Dólares</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <label class="form-label">Condiciones</label>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="visible" @bind="Mostrar" />
                                                            <label class="form-check-label" for="visible">Visible en Selector de Operaciones</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="obligatorio" @bind="Obliga" />
                                                            <label class="form-check-label" for="obligatorio">Se debe registrar obligatoriamente</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="interno" @bind="ProcesoInt" />
                                                            <label class="form-check-label" for="interno">El procesamiento debe ser interno</label>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class ="form-group d-flex justify-content-end">
                                                <button type="button"  class="btn dark btn-outline" @onclick="HideEditModal">Cancelar</button>
                                                <button type="button"  class="btn red" @onclick="SaveChanges">Aceptar</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane @(ActiveTab == "tab_datos_2" ? "active" : "")" id="tab_datos_2">
                                @if (IsTabDatos2Enabled)
                                {
                                    <div class="row">
                                        <div class="col-md-12">
                                            <form>
                                                <!-- Contenido del tab_datos_2 -->
                                                <div class="form-group">
                                                    <label for="tabtipcuenta">Tipo de Cuenta</label>
                                                    <select id="tabtipcuenta" class="form-control" @bind="selectedAccionCuenta.IdTipCta">
                                                        <option value="">Seleccione una cuenta</option>
                                                        @if (TabTipCuentas != null && TabTipCuentas.Any())
                                                        {
                                                            @foreach (var tipo in TabTipCuentas)
                                                            {
                                                                <option value="@tipo.IdTipCta">@tipo.Descripcion</option>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <option value="">No hay tipos disponibles</option>
                                                        }
                                                    </select>
                                                </div>
                                                <div class="form-group">
                                                    <label>Efecto en la Operación</label>
                                                    <select id="efectOpe" class="form-control" @bind="AccionOpe">
                                                        <option value="*">No Afecta</option>
                                                        <option value="+">Afecta (+)</option>
                                                        <option value="-">Afecta (-)</option>
                                                    </select>
                                                </div>
                                                <div class="form-group">
                                                    <table class="table table-striped table-bordered table-hover" id="sample_1">
                                                        <thead>
                                                            <tr>
                                                                <th> TipCuenta </th>
                                                                <th> Descripción </th>
                                                                <th> Operador </th>
                                                                <th> Acciones </th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @if (AccionCuentas.Any())
                                                            {
                                                                @foreach (var accion in AccionCuentas)
                                                                {
                                                                    <tr>
                                                                        <td>@accion.IdTipCta</td>
                                                                        <td>@accion.Descripcion</td>
                                                                        <td>@accion.Operador</td>
                                                                        <td>
                                                                            <!-- Acciones -->
                                                                            <button type="button" class="btn btn-outline btn-circle dark btn-sm black" @onclick="() => DeleteAccionOpe(accion.IdTipCta)">
                                                                                <i class="fa fa-trash-o"></i> Delete
                                                                            </button>

                                                                        </td>
                                                                    </tr>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <tr>
                                                                    <td colspan="4" class="text-center">No se encontraron acciones</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                                <div class="form-group d-flex justify-content-end">
                                                    <button type="button" class="btn dark btn-outline" @onclick="HideEditModal">Salir</button>
                                                    <button type="button" class="btn red" @onclick="SaveChangesAccion">Agregar</button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                }
                            </div>

                        </div>

                    </div>
                </div>
                @*  <div class="modal-footer">
                    <button type="button" class="btn dark btn-outline" @onclick="HideEditModal">Cancelar</button>
                    <button type="button" class="btn red" @onclick="SaveChanges">Aceptar</button>
                </div> *@
            </div>
        </div>
    </div>
}

@if (isDocModalVisible)
{
    <div id="DocModal" class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" @onclick="HideEditModal">×</button>
                    @* <h4 class="modal-title">@modalTitle</h4> *@
                    <h4 class="modal-title">Registro de Documentos de una Operación</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12">
                            <form >
                                @* <div class="form-body"> *@
                                <h5 class="bold" >Registro de Documento</h5>
                                <div class="form-group">

                                    @* <div class="col-md-4"> *@
                                    <label>Moneda</label>
                                    <select id="moneda" class="form-control" @bind="selectedDocOpe.TipMoneda">
                                        <option value="">Seleccione una moneda</option>
                                        <option value="0">Soles</option>
                                        <option value="1">Dolares</option>
                                    </select>
                                    @* </div> *@
                                    @* <div class="col-md-8"> *@
                                    <label>Documento</label>
                                    <select id="documento" class="form-control" @bind="selectedDocOpe.IdDoc">
                                        <option value="">Seleccione un documento</option>
                                        @if (Documentos != null && Documentos.Any())
                                        {
                                            @foreach (var tipo in Documentos)
                                            {
                                                <option value="@tipo.IdDoc">@tipo.Documento</option>
                                            }
                                        }
                                        else
                                        {
                                            <option value="">No hay documentos disponibles</option>
                                        }
                                    </select>
                                    @* </div> *@



                                </div>
                                <div class="form-group">
                                    <div class="col-md-4"></div>
                                    <div class="col-md-8">
                                        <div class="checkbox-list">
                                            <label class="checkbox-inline">
                                                <input class="form-check-input" type="checkbox" id="inlineCheckbox21" @bind="EmisionObligatoria" />
                                                Emisión Obligatoria
                                            </label>
                                            <label class="checkbox-inline">
                                                <input class="form-check-input" type="checkbox" id="inlineCheckbox22" @bind="Autonumerar" />
                                                Autonumerar
                                            </label>
                                            <label class="checkbox-inline">
                                                <input class="form-check-input" type="checkbox" id="inlineCheckbox23" @bind="Activo" />
                                                Activo
                                            </label>
                                        </div>
                                    </div>

                                </div>
                                @* <div class="form-group"></div> *@
                                <div class="form-group">
                                    @* <div class="col-md-7">

                                    </div> *@
                                    @*  <div class="col-md-5"> *@
                                    @* <button type="button" class="btn dark btn-outline" @onclick="HideDocModal">Cancelar</button> *@
                                    <button type="button" class="btn red" @onclick="SaveChangesDocxOpe">Registrar</button>
                                    @*  </div> *@

                                </div>
                                <div class="form-group">
                                    <table class="table table-striped table-bordered table-hover" id="sample_1">
                                        <thead>
                                            <tr>
                                                <th> IdDoc </th>
                                                @*  <th> TipMoneda </th> *@
                                                <th> Moneda </th>
                                                <th> Documento </th>
                                                <th> Estado </th>
                                                <th> Acciones </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (DocumentOpe.Any())
                                            {
                                                @foreach (var document in DocumentOpe)
                                                {
                                                    <tr>
                                                        @* @(ActiveTab == "tab_datos_2" ? "active" : "") *@
                                                        <td>@document.IdDoc</td>
                                                        @*  <td >@document.TipMoneda</td> *@
                                                        <td>@(document.TipMoneda=="0"?"S/.":"US$")</td>
                                                        <td>@document.Documento</td>
                                                        <td>
                                                            @((MarkupString)(document.Activo == "0"
                                                                                                                                                                        ? "<span class=\"badge badge-danger\">INACTIVO</span>"
                                                                                                                                                                        : "<span class=\"badge badge-success\">ACTIVO</span>"))
                                                        </td>
                                                        <td>
                                                            <!-- Acciones -->
                                                            @* <button type="button" class="btn btn-outline btn-circle dark btn-sm black" @onclick="() => DeleteAccionOpe(document.IdDoc)">
                                                                <i class="fa fa-trash-o"></i> Delete
                                                            </button> *@
                                                            @if (@document.Activo == "1")
                                                            {
                                                                <button type="button" @onclick="() => ShowOnOffModal(document)" class="btn btn-outline btn-circle dark btn-sm red">
                                                                    <i class="fa fa-trash-o"></i> Desactivar
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button type="button" @onclick="() => ShowOnOffModal(document)" class="btn btn-outline btn-circle dark btn-sm green-jungle">
                                                                    <i class="fa fa-trash-o"></i> Activar
                                                                </button>
                                                            }

                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="4" class="text-center">No se encontraron acciones</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <hr>
                                @* </div> *@
                            </form>
                            <form class="form-horizontal">
                                <div class="form-body">
                                    <h5 class="bold">Niveles de Aprobación</h5>
                                    <div class="form-group">

                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn dark btn-outline" @onclick="HideDocModal">Salir</button>
                    @* <button type="button" class="btn red" @onclick="SaveChanges">Aceptar</button> *@
                </div>
            </div>
        </div>
    </div>
}

@*MODAL PARA PODER MOSTRAR MENSAJE DE DESACTIVACIÓN*@


@if (isMensConfVisible)
{
    <div class="modal fade in" id="basic" tabindex="-1" role="basic" aria-hidden="true" style="display: block; padding-right: 15px;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button @onclick="HideMensConfModal" type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                    <h4 class="modal-title">Confirmación</h4>
                </div>
                <div class="modal-body"> ¿Estás seguro de que deseas @(selectedDocOpe.Activo == "0" ? "activar" : "desactivar") el documento en @(selectedDocOpe.TipMoneda == "0" ? "S./" : "US$") <b>@selectedDocOpe.IdDoc</b> - <b> @NomDoc </b>? </div>
                <div class="modal-footer">
                    <button @onclick="OnOffDocOpe" type="button" class="btn btn-outline btn-circle btn-sm blue" data-dismiss="modal">Sí, @(selectedDocOpe.Activo == "0" ? "Activar" : "Desactivar")</button>
                    <button @onclick="HideMensConfModal" type="button" class="btn btn-outline btn-circle dark btn-sm red" data-dismiss="modal">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    // [Inject] private IJSRuntime JSRuntime { get; set; }

    private int op;
    private List<OperacionDBModel> Operaciones = new List<OperacionDBModel>();
    private bool isDataLoaded = false;
    // private requestOperacionModel selectedOperacion = new requestOperacionModel();
    private List<OperacionDBModel> OperacionesTab2 = new List<OperacionDBModel>();
    private List<OperacionDBModel> OperacionesTab3 = new List<OperacionDBModel>();
    private bool isEditModalVisible = false;
    private bool isDocModalVisible = false;
    private bool isMensConfVisible = false;
    private string modalTitle = "Editar Operación";
    private requestOperacionModel selectedOperacion = new requestOperacionModel();
    private requestOperacionModel selectedOperacion2 = new requestOperacionModel();
    private List<TipOpeDBModel> TiposOperacion = new List<TipOpeDBModel>();
    private List<TabTipCuentaModel> TabTipCuentas = new List<TabTipCuentaModel>();
    private List<DocumentosModel> Documentos = new List<DocumentosModel>();
    private bool MonedaSoles = false;
    private bool MonedaDolares = false;
    private bool Mostrar = false;
    private bool Obliga = false;
    private bool ProcesoInt = false;
    private int currentOption = 1; // 1 para crear, 2 para editar, 3 para eliminar
    private int currentNivel = 1; // Nivel inicial por defecto
    private string IdOpePadre = null; // Almacena el IdOpe seleccionado en el tab1
    private string IdOpePadre2 = null; // Almacena el IdOpe seleccionado en el tab1
    private bool IsTabDatos2Enabled = false; // Controla si el tab_datos_2 está habilitado
    private requestAccionOpexTipCtaModel selectedAccionCuenta = new requestAccionOpexTipCtaModel();
    private List<AccionOpexTipCtaModel> AccionCuentas = new List<AccionOpexTipCtaModel>();
    private requestDocxOpeModel selectedDocOpe = new requestDocxOpeModel();
    private List<DocxOpeModel> DocumentOpe = new List<DocxOpeModel>();
    private string ActiveTab = "tab_datos_1"; // Por defecto, el tab_datos_1 está activo
    private string AccionOpe = string.Empty; // Inicializar con un valor vacío
    private string message = string.Empty;
    private bool EmisionObligatoria { get; set; }
    private bool Autonumerar { get; set; }
    private bool Activo { get; set; }
    private string NomDoc = string.Empty;


    private async Task LoadTiposOperacion()
    {
        try
        {
            TiposOperacion = await OperacionService.LoadTipOpeDataAsync();
            if (TiposOperacion == null)
            {
                TiposOperacion = new List<TipOpeDBModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los tipos de operación: {ex.Message}");
            TiposOperacion = new List<TipOpeDBModel>();
        }
    }

    private async Task LoadTabTipCuenta()
    {
        try
        {
            TabTipCuentas = await OperacionService.LoadTabTipCuentaDataAsync();
            if(TabTipCuentas == null)
            {
                TabTipCuentas = new List<TabTipCuentaModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los tipos de cuentas: {ex.Message}");
            TabTipCuentas = new List<TabTipCuentaModel>();
        }
    }
    private async Task LoadDocumentos()
    {
        try
        {
            Documentos = await OperacionService.LoadDocumentosDataAsync();
            if(Documentos==null)
            {
                Documentos = new List<DocumentosModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los documentos: {ex.Message}");
            Documentos = new List<DocumentosModel>();
        }
    }
    public async Task LoadAccionOpe(string idope)
    {
        try
        {
            AccionCuentas = await OperacionService.LoadAccionOpeDataAsync(idope);
            if(AccionCuentas == null)
            {
                AccionCuentas = new List<AccionOpexTipCtaModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las acciones de las cuentas: {ex.Message}");
            TabTipCuentas = new List<TabTipCuentaModel>();
        }
    }
    public async Task LoadDocumentOpe(string idope)
    {
        try
        {
            DocumentOpe = await OperacionService.LoadDocumentoOpeDataAsync(idope);
            if (DocumentOpe == null)
            {
                DocumentOpe = new List<DocxOpeModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los ducumentos x operación: {ex.Message}");
            DocumentOpe = new List<DocxOpeModel>();
        }
    }
    private async Task OnCheckboxChanged(OperacionDBModel operacion, object value)
    {
        // Actualiza el estado del checkbox seleccionado
        bool isSelected = (bool)value;
        operacion.IsSelected = isSelected;

        // Desmarca todos los demás checkboxes si este está seleccionado
        if (isSelected)
        {
            foreach (var op in Operaciones)
            {
                if (op != operacion)
                {
                    op.IsSelected = false;
                }
            }
            // Actualiza la operación seleccionada
            selectedOperacion = new requestOperacionModel
                {
                    IdOpe = operacion.IdOpe,
                    Operacion = operacion.Operacion,
                    IdTipOpe = operacion.IdTipOpe,
                    Elemento = operacion.Elemento
                };
            // Guarda el IdOpe como IdOpePadre
            IdOpePadre = operacion.IdOpe;

            // Carga las operaciones del nivel 2
            currentNivel = 2;//Cambia al nivel 2
            OperacionesTab2 = await OperacionService.LoadOperacionNivel(2, operacion.IdOpe) ?? new List<OperacionDBModel>();
        }
        else
        {
            // Si se desmarca, limpia la operación seleccionada y las operaciones del nivel 2
            selectedOperacion = new requestOperacionModel();
            OperacionesTab2 = new List<OperacionDBModel>();
            OperacionesTab3 = new List<OperacionDBModel>(); // Limpia el nivel 3
            currentNivel = 1; // Vuelve al nivel 1
            // Limpia el IdOpePadre
            IdOpePadre = null;
        }

        // Actualiza la UI
        StateHasChanged();
    }
    private async Task OnCheckboxChangedNivel3(OperacionDBModel operacion, object value)
    {
        // Actualiza el estado del checkbox seleccionado
        bool isSelected = (bool)value;
        operacion.IsSelected2 = isSelected;

        // Desmarca todos los demás checkboxes si este está seleccionado
        if (isSelected)
        {
            foreach (var op in OperacionesTab2)
            {
                if (op != operacion)
                {
                    op.IsSelected2 = false;
                }
            }
            // Actualiza la operación seleccionada
            selectedOperacion2 = new requestOperacionModel
                {
                    IdOpe = operacion.IdOpeHijo,
                    Operacion = operacion.Operacion,
                    IdTipOpe = operacion.IdTipOpe,
                    Elemento = operacion.Elemento
                };
            // Guarda el IdOpe como IdOpePadre
            IdOpePadre2 = operacion.IdOpeHijo;

            // Carga las operaciones del nivel 3
            currentNivel = 3;//Cambia al nivel 3
            OperacionesTab3 = await OperacionService.LoadOperacionNivel(3, operacion.IdOpeHijo) ?? new List<OperacionDBModel>();
        }
        else
        {
            // Si se desmarca, limpia la operación seleccionada y las operaciones del nivel 2
            selectedOperacion2 = new requestOperacionModel();
            OperacionesTab3 = new List<OperacionDBModel>();
            currentNivel = 2;//Vuelve al nivel 1
            // Limpia el IdOpePadre
            IdOpePadre2 = null;
        }

        // Actualiza la UI
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadOperacionData(1,"-");
        isDataLoaded = true;

    }

    private async Task LoadOperacionData(int nivel,string idope)
    {
        // bool op = isRaizContableEnabled;
        Operaciones = await OperacionService.LoadOperacionNivel(nivel, idope);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isDataLoaded)
        {
            // Inicializa tus scripts aquí
            await InitializeDataTable();
        }
    }
    private async Task InitializeDataTable()
    {
        var script = @"
            $(document).ready(function() {
                $('#sample_1').DataTable({
                    paging: true,
                   searching: true,
                   ordering: true,
                   pageLength: 10,
                   lengthMenu: [5, 10, 15, 20, -1]
                });
            });
        ";
    }

    private async Task ShowCreateModal()
    {
        selectedOperacion = new requestOperacionModel(); // Nueva operación
        MonedaSoles = false;
        MonedaDolares = false;
        Mostrar = false;
        Obliga = false;
        ProcesoInt = false;
        modalTitle = "Agregar Operación";
        IsTabDatos2Enabled = false; // Deshabilitar el tab_datos_2 al crear una operación

        // Si estamos en el tab2, asignar el IdOpePadre
        if (currentNivel == 2 && !string.IsNullOrEmpty(IdOpePadre))
        {
            selectedOperacion.IdOpeP = IdOpePadre; // Asignar el IdOpePadre como IdOpe padre
        }
        await LoadTiposOperacion(); // Cargar los tipos de operación
        await LoadTabTipCuenta(); // Cargar los tipos de cuentas
        isEditModalVisible = true;
        currentOption = 1; // Opción para crear
    }

    private async Task ShowEditModal(OperacionDBModel operacion)
    {
        selectedOperacion = new requestOperacionModel
            {
                IdOpe = currentNivel == 3 ? operacion.IdOpeHijo : currentNivel == 2 ? operacion.IdOpeHijo : operacion.IdOpe,
                Operacion = operacion.Operacion,
                IdTipOpe = operacion.IdTipOpe,
                Elemento = operacion.Elemento,
                IdOpeP = currentNivel == 3 ? IdOpePadre2 : currentNivel == 2 ? IdOpePadre : null // Asigna el IdOpe padre según el nivel
            };

        // Asignar valores a los checkboxes
        MonedaSoles = operacion.TipmonedaSol == "0";
        MonedaDolares = operacion.TipmonedaDol == "1";
        Mostrar = operacion.Mostrar == "1";
        Obliga = operacion.Obliga == "1";
        ProcesoInt = operacion.ProcesoInt == "1";

        modalTitle = "Editar Operación";
        // Habilitar el tab_datos_2 solo si se está editando una operación del nivel 2
        IsTabDatos2Enabled = true; //= currentNivel == 2;
        // if (IsTabDatos2Enabled)
        // {
        await LoadAccionOpe(currentNivel == 3 ? operacion.IdOpeHijo : currentNivel == 2 ? operacion.IdOpeHijo : operacion.IdOpe); // Cargar las acciones del tab_datos_2 usando el IdOpe
        // Reiniciar el valor del combo AccionOpe
        AccionOpe = "*"; // Valor predeterminado o el valor que corresponda
        selectedAccionCuenta = new requestAccionOpexTipCtaModel(); // Reiniciar el modelo seleccionado
        // }
        await LoadTiposOperacion(); // Cargar los tipos de operación
        await LoadTabTipCuenta(); // Cargar los tipos de cuentas
        isEditModalVisible = true;
        currentOption = 2; // Opción para editar
    }
    private async Task ShowOnOffModal(DocxOpeModel docOpe)
    {
        selectedDocOpe = new requestDocxOpeModel
            {
                IdOpe = selectedOperacion.IdOpe,
                IdDoc = docOpe.IdDoc,
                Activo = docOpe.Activo=="0"?"1":"0",
                TipMoneda = docOpe.TipMoneda,
                IdUser = "SerVer"
            };
        NomDoc = docOpe.Documento;
        isMensConfVisible = true;
    }

    private async Task ShowDocModal(OperacionDBModel operacion)
    {
        selectedOperacion = new requestOperacionModel
            {
                IdOpe = currentNivel == 2 ? operacion.IdOpeHijo : operacion.IdOpe,
                Operacion = operacion.Operacion,
                IdTipOpe = operacion.IdTipOpe,
                Elemento = operacion.Elemento
            };
        EmisionObligatoria = false;
        Autonumerar = false;
        Activo = false;
        await LoadDocumentOpe(currentNivel == 2 ? operacion.IdOpeHijo : operacion.IdOpe);
        await LoadDocumentos();
        isDocModalVisible = true;
    }

    private void HideEditModal()
    {
        isEditModalVisible = false;
    }
    private void HideDocModal()
    {
        isDocModalVisible = false;
    }
    private void HideMensConfModal()
    {
        isMensConfVisible = false;
    }
    private void SetActiveTab(string tabId)
    {
        ActiveTab = tabId;
    }

    private async Task SaveChangesAccion()
    {
        // Console.WriteLine($"Valor de AccionOpe: {AccionOpe}"); // Depuración
        var request = new requestAccionOpexTipCtaModel
            {
                IdOpe = currentNivel == 3 ? IdOpePadre2 : currentNivel == 2 ? IdOpePadre : selectedOperacion.IdOpe,
                IdTipCta = selectedAccionCuenta.IdTipCta,
                Operador = AccionOpe
            };
        var AccionOpeData = await OperacionService.Create_Delete_AccionAsync(request, 1);
        var firstAccionOpeData = AccionOpeData.FirstOrDefault();
        if (firstAccionOpeData != null && firstAccionOpeData.bEstado == "1")
        {
            // Recargar el DataTable de acciones
            await LoadAccionOpe(request.IdOpe);

            // Mostrar mensaje de éxito
            await JSRuntime.InvokeVoidAsync("alert", "Acción guardada exitosamente.");
        }
        else if (firstAccionOpeData != null && firstAccionOpeData.bEstado == "0")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Errores de validación: " + firstAccionOpeData.Descripcion);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al crear el registro");
        }
    }
    private async Task SaveChangesDocxOpe()
    {
        var request = new requestDocxOpeModel
            {
                IdOpe = currentNivel == 3 ? IdOpePadre2 : currentNivel == 2 ? IdOpePadre : selectedOperacion.IdOpe,
                IdDoc = selectedDocOpe.IdDoc,
                Autogen = Autonumerar ? "1" : "0",
                TipMoneda = selectedDocOpe.TipMoneda,
                Obliga = EmisionObligatoria ? "1" : "0",
                IdUser = "SerVer"
            };
        var DocOpeData = await OperacionService.CreateDocOpeAsync(request);
        var firstDocOpeData = DocOpeData.FirstOrDefault();
        if (firstDocOpeData != null && firstDocOpeData.bEstado == "1")
        {
            // Recargar el DataTable de acciones
            await LoadDocumentOpe(request.IdOpe);

            // Mostrar mensaje de éxito
            await JSRuntime.InvokeVoidAsync("alert", "Acción guardada exitosamente.");
        }
        else if (firstDocOpeData != null && firstDocOpeData.bEstado == "0")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Errores de validación: " + firstDocOpeData.Documento);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al crear el registro");
        }
    }
    private async Task DeleteAccionOpe(string idTipCta)
    {
        var request = new requestAccionOpexTipCtaModel
            {
                IdOpe = selectedOperacion.IdOpe,
                IdTipCta = idTipCta,
                Operador = ""
            };

        var AccionOpeData = await OperacionService.Create_Delete_AccionAsync(request, 2);
        var firstAccionOpeData = AccionOpeData.FirstOrDefault();
        if (firstAccionOpeData != null && firstAccionOpeData.bEstado == "1")
        {

            // Recargar el DataTable de acciones
            await LoadAccionOpe(selectedOperacion.IdOpe);

            // Mostrar mensaje de éxito
            await JSRuntime.InvokeVoidAsync("alert", "Acción eliminada exitosamente.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el registro");
        }
        // Refrescar la UI
        StateHasChanged();
    }
    private async Task OnOffDocOpe()
    {
        var DocumentOpeData = await OperacionService.OnOffDocumentOpeAsync(selectedDocOpe);
        var firstDocumentOpeData = DocumentOpeData.FirstOrDefault();
        if (firstDocumentOpeData != null && firstDocumentOpeData.bEstado == "1")
        {
            // Recargar el DataTable de acciones
            await LoadDocumentOpe(selectedDocOpe.IdOpe);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al actualizar el registro");
        }
        // Refrescar la UI
        StateHasChanged();
        HideMensConfModal();
    }
    private async Task SaveChanges()
    {
        // var request = new requestOperacionModel
        //     {
        //         IdOpe = selectedOperacion.IdOpe,
        //         Operacion = selectedOperacion.Operacion,
        //         IdTipOpe = selectedOperacion.IdTipOpe,
        //         Mostrar = Mostrar == true ? "1" : "0",
        //         Obliga = Obliga == true ? "1" : "0",
        //         IdUser = "SerVer",
        //         ProcesoInt = ProcesoInt == true ? "1" : "0",
        //         Elemento = selectedOperacion.Elemento,
        //         Nivel = currentNivel, // Usa el nivel actual
        //         TipmonedaSol = MonedaSoles == true ? "0" : null,
        //         TipmonedaDol = MonedaDolares == true ? "1" : null,
        //         IdOpeP = currentNivel == 2 ? selectedOperacion.IdOpeP : null // Si es nivel 2, asigna el IdOpe padre
        //     };
        // Determinar el modelo a usar según el nivel
        var request = currentNivel == 3 ? selectedOperacion : selectedOperacion;

        // Configurar los datos comunes
        request.Mostrar = Mostrar ? "1" : "0";
        request.Obliga = Obliga ? "1" : "0";
        request.ProcesoInt = ProcesoInt ? "1" : "0";
        request.TipmonedaSol = MonedaSoles ? "0" : null;
        request.TipmonedaDol = MonedaDolares ? "1" : null;
        request.IdUser = "SerVer";
        request.Nivel = currentNivel;

        // Asignar el IdOpeP según el nivel
        if (currentNivel == 2)
        {
            request.IdOpeP = IdOpePadre;
        }
        else if (currentNivel == 3)
        {
            request.IdOpeP = IdOpePadre2;
        }

        if (currentNivel == 2 && string.IsNullOrEmpty(request.IdOpeP))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Debe seleccionar una operación en el nivel 1 antes de agregar una operación en el nivel 2.");
            return;
        }

        if (currentOption == 1) // Crear
        {
            var response = await OperacionService.Create_Update_Delete_OperacionDataAsync(request, currentOption);
            if (response != null && response.Any() && response.First().bEstado == "1")
            {
                // Agregar a la tabla correspondiente
                var nuevaOperacion = new OperacionDBModel
                    {
                        IdOpe = response.First().IdOpe,
                        IdOpeHijo=response.First().IdOpeHijo,
                        Operacion = request.Operacion,
                        IdTipOpe = request.IdTipOpe,
                        Elemento = request.Elemento,
                        Nivel = request.Nivel.ToString(),
                        TipmonedaDol=request.TipmonedaDol,
                        TipmonedaSol=request.TipmonedaSol,
                        Obliga=request.Obliga,
                        Mostrar=request.Mostrar,
                        ProcesoInt=request.ProcesoInt
                    };

                if (currentNivel == 1)
                {
                    Operaciones.Add(nuevaOperacion);
                }
                else if (currentNivel == 2)
                {
                    OperacionesTab2.Add(nuevaOperacion);
                }
                else if (currentNivel == 3)
                {
                    OperacionesTab3.Add(nuevaOperacion);
                }

                // Mostrar mensaje de éxito
                await JSRuntime.InvokeVoidAsync("alert", "Operación creada exitosamente.");
            }
            else
            {
                // Mostrar mensaje de error
                await JSRuntime.InvokeVoidAsync("alert", "Error al crear la operación.");
            }
        }
        else if (currentOption == 2) // Actualizar
        {
            var response = await OperacionService.Create_Update_Delete_OperacionDataAsync(request, currentOption);
            if (response != null && response.Any() && response.First().bEstado == "1")
            {
                // Actualizar en la tabla correspondiente
                if(currentNivel==1)
                {
                    var operacionExistente = Operaciones.FirstOrDefault(o => o.IdOpe == request.IdOpe);
                    if (operacionExistente != null)
                    {
                        operacionExistente.Operacion = request.Operacion;
                        operacionExistente.IdTipOpe = request.IdTipOpe;
                        operacionExistente.Elemento = request.Elemento;
                        operacionExistente.Nivel = request.Nivel.ToString();
                        operacionExistente.TipmonedaSol = request.TipmonedaSol;
                        operacionExistente.TipmonedaDol = request.TipmonedaDol;
                        operacionExistente.Obliga = request.Obliga;
                        operacionExistente.ProcesoInt = request.ProcesoInt;
                        operacionExistente.Mostrar = request.Mostrar;
                    }
                }
                else if (currentNivel==2)
                {
                    var operacionExistente2 = OperacionesTab2.FirstOrDefault(o => o.IdOpeHijo == request.IdOpe);
                    if (operacionExistente2 != null)
                    {
                        operacionExistente2.Operacion = request.Operacion;
                        operacionExistente2.IdTipOpe = request.IdTipOpe;
                        operacionExistente2.Elemento = request.Elemento;
                        operacionExistente2.Nivel = request.Nivel.ToString();
                        operacionExistente2.TipmonedaSol = request.TipmonedaSol;
                        operacionExistente2.TipmonedaDol = request.TipmonedaDol;
                        operacionExistente2.Obliga = request.Obliga;
                        operacionExistente2.ProcesoInt = request.ProcesoInt;
                        operacionExistente2.Mostrar = request.Mostrar;
                    }
                }
                else if (currentNivel==3)
                {
                    var operacionExistente3 = OperacionesTab2.FirstOrDefault(o => o.IdOpeHijo == request.IdOpe);
                    if (operacionExistente3 != null)
                    {
                        operacionExistente3.Operacion = request.Operacion;
                        operacionExistente3.IdTipOpe = request.IdTipOpe;
                        operacionExistente3.Elemento = request.Elemento;
                        operacionExistente3.Nivel = request.Nivel.ToString();
                        operacionExistente3.TipmonedaSol = request.TipmonedaSol;
                        operacionExistente3.TipmonedaDol = request.TipmonedaDol;
                        operacionExistente3.Obliga = request.Obliga;
                        operacionExistente3.ProcesoInt = request.ProcesoInt;
                        operacionExistente3.Mostrar = request.Mostrar;
                    }
                }


                // Mostrar mensaje de éxito
                await JSRuntime.InvokeVoidAsync("alert", "Operación actualizada exitosamente.");
            }
            else
            {
                // Mostrar mensaje de error
                await JSRuntime.InvokeVoidAsync("alert", "Error al actualizar la operación.");
            }
        }

        // Cierra el modal
        HideEditModal();
    }




}
