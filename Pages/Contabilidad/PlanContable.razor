@page "/PlanContable"
@inject LeonXIIICore.Controllers.Contabilidad.PlanContableClass PlanContableService
@inject IJSRuntime JSRuntime

@using LeonXIIICore.Models.Contabilidad

<div class="portlet light">
    <div class="portlet-title">
        <div class="caption">
            <i class="icon-social-dribbble font-green"></i>
            <span class="caption-subject font-green bold uppercase">Cuentas Contables</span>
        </div>
    </div>
    <div class="portlet-body">
        <div class="form-group">
            <label for="year">Año</label>
            <input type="text" id="year" class="form-control" @bind="year" />
        </div>
        <div class="form-group">
            <label>
                <input type="checkbox" @bind="isMonedaEnabled" @onclick="ToggleMoneda" /> Habilitar Moneda
            </label>
            <label>
                <input type="checkbox" @bind="isRaizContableEnabled" @onclick="ToggleRaizContable" /> Habilitar Raíz Contable
            </label>
        </div>
        <div class="form-group">
            <label for="moneda">Moneda</label>
            <select id="moneda" class="form-control" @bind="moneda" disabled="@(isRaizContableEnabled)">
                <option value="_">Todos</option>
                <option value="1">Soles</option>
                <option value="2">Dólares</option>
                <option value="0">Integrador</option>
            </select>
        </div>
        <div class="form-group">
            <label for="raizContable">Raíz Contable</label>
            <input type="text" id="raizContable" class="form-control" @bind="raizContable" disabled="@(isMonedaEnabled)" />
        </div>
        <button class="btn btn-primary" @onclick="LoadCtaData">Cargar Cuenta Contable</button>
        <button class="btn btn-success" @onclick="ShowCreateModal">Crear Cuenta Contable</button>
        <div class="portlet light">
            <div class="portlet-title">
                <div class="caption font-dark">
                    <i class="icon-settings font-dark"></i>
                    <span class="caption-subject bold uppercase">Column Reordering</span>
                </div>
                <div class="tools"> </div>
            </div>
            <div class="portlet-body">
                <table class="table table-striped table-bordered table-hover dataTable no-footer dtr-inline" id="sample_1" role="grid" aria-describedby="sample_1_info">
                    <thead>
                        <tr>
                            <th>Cuenta Contable</th>
                            <th>Descripción</th>
                            <th>De asiento</th>
                            <th>Cta Equivalente</th>
                            <th>Área</th>
                            <th>idarea</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cuenta in cuentasContables)
                        {
                            <tr>
                                <td>@cuenta.CtaContable</td>
                                <td>@cuenta.Descripcion</td>
                                <td>@cuenta.CtaAsiento</td>
                                <td>@cuenta.NvaCtaContable</td>
                                <td>@cuenta.area</td>
                                <td>@cuenta.idarea</td>
                                <td>
                                    <button class="btn btn-outline btn-circle btn-sm purple" @onclick="() => ShowEditModal(cuenta)">
                                        <i class="fa fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-outline btn-circle dark btn-sm black" @onclick="() => DeleteCuenta(cuenta)">
                                        <i class="fa fa-trash-o"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@if (isEditModalVisible)
{
    <div id="editModal" class="modal fade in" tabindex="-1" data-width="400" style="display: block; padding-right: 17px;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" @onclick="HideEditModal">×</button>
                    <h4 class="modal-title">@modalTitle</h4>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="ctaContable">Cuenta Contable</label>
                            <input type="text" id="ctaContable" class="form-control" @bind="selectedCuenta.CtaContable">
                        </div>
                        <div class="form-group">
                            <label for="descripcion">Descripción</label>
                            <input type="text" id="descripcion" class="form-control" @bind="selectedCuenta.Descripcion">
                        </div>
                        <div class="form-group">
                            <label for="ctaAsiento">De asiento</label>
                            <select id="ctaAsiento" class="form-control" @bind="selectedCuenta.CtaAsiento">
                                <option value="S">Sí</option>
                                <option value="N">No</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="nvaCtaContable">Cta Equivalente</label>
                            <input type="text" id="nvaCtaContable" class="form-control" @bind="selectedCuenta.NvaCtaContable">
                        </div>
                        <div class="form-group">
                            <label for="area">Área</label>
                            <select id="area" class="form-control" @bind="selectedCuenta.idarea">
                                <option value="">Seleccione un área</option>
                                @foreach (var area in areas)
                                {
                                    <option value="@area.idarea">@area.area</option>
                                }
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn dark btn-outline" @onclick="HideEditModal">Cancelar</button>
                    <button type="button" class="btn red" @onclick="SaveChanges">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private string year = "2025";
    private string moneda = "_";
    private string raizContable = "_";
    private List<PlanCuentasDBModel> cuentasContables = new List<PlanCuentasDBModel>();
    private List<AreaModel> areas = new List<AreaModel>();
    private bool isDataLoaded = false;
    private bool isEditModalVisible = false;
    private bool isMonedaEnabled = true; // Inicializar como true para que el checkbox de Moneda esté marcado
    private bool isRaizContableEnabled = false;
    private requestPlanCuentasModel selectedCuenta = new requestPlanCuentasModel();
    private string modalTitle = "Editar Cuenta Contable";
    private int currentOption = 1; // 1 para crear, 2 para editar, 3 para eliminar

    private string iduser = "SerVer";
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAreaData();
        await LoadCtaData();
        isDataLoaded = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isDataLoaded)
        {
            await InitializeDataTable();
        }
    }

    private async Task LoadCtaData()
    {
        bool op = isRaizContableEnabled;
        cuentasContables = await PlanContableService.LoadPlanContableDataAsync(year, raizContable, op);
    }

    private async Task LoadAreaData()
    {
        areas = await PlanContableService.LoadAreaDataAsync();
    }

    private async Task InitializeDataTable()
    {
        var script = @"
            $(document).ready(function() {
                $('#sample_2').DataTable({
                    paging: true,
                    searching: true,
                    ordering: true,
                    pageLength: 10
                });
            });
        ";
        await JSRuntime.InvokeVoidAsync("eval", script);
    }

    private void ToggleMoneda()
    {
        isMonedaEnabled = !isMonedaEnabled;
        if (isMonedaEnabled)
        {
            isRaizContableEnabled = false;
            raizContable = moneda;
        }
    }

    private void ToggleRaizContable()
    {
        isRaizContableEnabled = !isRaizContableEnabled;
        if (isRaizContableEnabled)
        {
            isMonedaEnabled = false;
            raizContable = string.Empty;
        }
    }

    private void ShowCreateModal()
    {
        selectedCuenta = new requestPlanCuentasModel
            {
                CtaAsiento = "N" // Valor predeterminado para evitar null
            };
        modalTitle = "Crear Cuenta Contable";
        isEditModalVisible = true;
        currentOption = 1; // Opción para crear
    }

    private void ShowEditModal(PlanCuentasDBModel cuenta)
    {
        selectedCuenta = new requestPlanCuentasModel
            {
                Año = year,
                CtaContable = cuenta.CtaContable,
                Descripcion = cuenta.Descripcion,
                CtaAsiento = cuenta.CtaAsiento,
                NvaCtaContable = cuenta.NvaCtaContable,
                idarea = cuenta.idarea
            };
        modalTitle = "Editar Cuenta Contable";
        isEditModalVisible = true;
        currentOption = 2; // Opción para editar
    }

    private void HideEditModal()
    {
        isEditModalVisible = false;
    }

    private async Task SaveChanges()
    {
        var request = new requestPlanCuentasModel
            {
                Año = year,
                CtaContable = selectedCuenta.CtaContable,
                Descripcion = selectedCuenta.Descripcion,
                CtaAsiento = selectedCuenta.CtaAsiento == "S" ? "S" : "N",
                NvaCtaContable = selectedCuenta.NvaCtaContable,
                idarea = selectedCuenta.idarea,
                IdUser = iduser
            };

        var planContableData = await PlanContableService.Create_Update_Delete_PlanContableDataAsync(request, currentOption);
        var firstPlanContableData = planContableData.FirstOrDefault();
        if (firstPlanContableData != null && firstPlanContableData.bEstado == "1")
        {
            if (currentOption == 1) // Insertar
            {
                cuentasContables.Add(new PlanCuentasDBModel
                    {
                        CtaContable = request.CtaContable,
                        Descripcion = request.Descripcion,
                        CtaAsiento = request.CtaAsiento,
                        NvaCtaContable = request.NvaCtaContable,
                        area = areas.FirstOrDefault(a => a.idarea == request.idarea)?.area,
                        idarea = request.idarea
                    });
                message = "Registro creado correctamente";
            }
            else if (currentOption == 2) // Actualizar
            {
                var cuenta = cuentasContables.FirstOrDefault(c => c.CtaContable == request.CtaContable);
                if (cuenta != null)
                {
                    cuenta.Descripcion = request.Descripcion;
                    cuenta.CtaAsiento = request.CtaAsiento;
                    cuenta.NvaCtaContable = request.NvaCtaContable;
                    cuenta.area = areas.FirstOrDefault(a => a.idarea == request.idarea)?.area;
                    cuenta.idarea = request.idarea;
                }
                message = "Registro actualizado correctamente";
            }
            // else if (currentOption == 3) // Eliminar
            // {
            //     var cuenta = cuentasContables.FirstOrDefault(c => c.CtaContable == request.CtaContable);
            //     if (cuenta != null)
            //     {
            //         cuentasContables.Remove(cuenta);
            //     }
            //     message = "Registro eliminado correctamente";
            // }

            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        else if (firstPlanContableData != null && firstPlanContableData.bEstado == "0")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Errores de validación: " + firstPlanContableData.Descripcion);
        }
        else
        {
            message = currentOption == 1 ? "Error al crear el registro" : currentOption == 2 ? "Error al actualizar el registro" : "Error al eliminar el registro";
            await JSRuntime.InvokeVoidAsync("alert", message);
        }

        await LoadCtaData();
        HideEditModal();
    }

    private async Task DeleteCuenta(PlanCuentasDBModel cuenta)
    {
        var request = new requestPlanCuentasModel
            {
                Año=year,
                CtaContable = cuenta.CtaContable,
                Descripcion = cuenta.Descripcion,
                CtaAsiento = cuenta.CtaAsiento,
                NvaCtaContable = cuenta.NvaCtaContable,
                idarea = cuenta.idarea,
                IdUser = iduser
            };

        var planContableData = await PlanContableService.Create_Update_Delete_PlanContableDataAsync(request, 3);
        var firstPlanContableData = planContableData.FirstOrDefault();
        if (firstPlanContableData != null && firstPlanContableData.bEstado == "1")
        {
            
                var ccuenta = cuentasContables.FirstOrDefault(c => c.CtaContable == request.CtaContable);
                if (ccuenta != null)
                {
                    cuentasContables.Remove(ccuenta);
                }
                message = "Registro eliminado correctamente";
           

            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        else if (firstPlanContableData != null && firstPlanContableData.bEstado == "0")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Errores de validación: " + firstPlanContableData.Descripcion);
        }
        else
        {
            message =  "Error al eliminar el registro";
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        await LoadCtaData();
    }
}





