@page "/Articulo"
@inject HttpClient Http

@using System.Linq


@using Models.Sistema
@using Clases.Sistema
@using Controllers.Sistema

@using System.Security.Claims
@using LeonXIIICore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClaimsService ClaimsService

<div class="row" style="transition: opacity 0.3s ease-in !important;
    opacity: 1 !important;">
    <div class="col-md-12">
        <div class="portlet light portlet-fit">


            <div class="header-grupo-plantilla">
                <div class="caption mb-0">
                    <i class="icon-settings"></i>
                    <span class="titulo-seccion-plantilla">CONFIGURACIÓN DE ARTÍCULOS</span>
                </div>

                <div class="actions">
@*                    <button class="btn green" @onclick="AbrirModalNuevo">
                        Nuevo Artículo <i class="fa fa-plus"></i>
                    </button>*@
                </div>
            </div>

@*            <div class="bg-transparent">
                <input type="text" class="form-control search-input" placeholder="Buscar Artículo..." @oninput="AlBuscar" />
            </div>*@
            <div class="blazor-content portlet-body">
                 <div class="row mt-3 mb-3">
                    <div class="col-md-6">
                        <input type="text" class="form-control search-input" placeholder="Buscar Descripción..." @oninput="AlBuscar" />
                    </div>
                    <div class="col-md-6 text-right">
                        <button class="btn green" @onclick="AbrirModalNuevo">
                        Nuevo Artículo <i class="fa fa-plus"></i>
                        </button>
                    </div>
                 </div>
                 <div class="row">
                    <div class="col-md-12">
                    <div class="portlet-body" >
                        @if (grupoPaginados == null)
                        {
                                <p>Cargando productos...</p>
                        }
                        else
                        {
                                <table class="table table-striped table-hover table-bordered tabla-centro" id="tabla_productos">
                                    <thead>
                                        <tr>
                                            <th>CÓDIGO</th>
                                            <th class="hidden-column">IDUNIMED</th>
                                            <th>UNIDAD MEDIDA</th>
                                            <th>ARTÍCULO</th>
                                            <th style="max-width:80px">AFECTO IGV</th>
                                            <th class="hidden-column">IDGRUPO</th>
                                            <th>GRUPO</th>
                                            <th>CUENTA CONTABLE</th>
                                            <th style="max-width:80px">AFECTO KÁRDEX</th>
                                            <th class="hidden-column">USUARIO</th>
                                            <th>FECHA REGISTRO</th>
                                            <th>ACTIVO</th>
                                            <th>ACCIONES</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var articulo in grupoPaginados)
                                    {
                                                <tr>
                                                    <td>@articulo.Codigo</td>
                                                    <td class="hidden-column">@articulo.IdUniMed</td>
                                                    <td style="max-width:150px">@articulo.UnidadMedida</td>
                                                    <td style="max-width:500px">@articulo.Articulo</td>
                                                    <td style="max-width:80px">@(articulo.AfectoIGV == "1" ? "Sí" : "No")</td>
                                                    <td class="hidden-column">@articulo.IdGrupo</td>
                                                    <td style="max-width:150px">@articulo.Grupo</td>
                                                    <td>@articulo.CtaContable</td>
                                                    <td style="max-width:80px">@(articulo.AfectoKardex == "1" ? "Sí" : "No")</td>
                                                    <td class="hidden-column">@articulo.Usuario</td>
                                                    <td>@articulo.FechaRegistro</td>
                                                    <td>@(articulo.Activo == "1" ? "Sí" : "No")</td>
                                                    <td class="center">
                                                        <button class="btn btn-sm btn-primary d-flex align-items-center gap-1" @onclick="() => AbrirModalEditarArticulo(articulo)">
                                                            <i class="fa fa-edit"></i>
                                                            <span>Editar</span>
                                                        </button>
                                                <button class="btn btn-sm btn-danger d-flex align-items-center gap-1 mt-1" @onclick="() => EliminarArticulo(articulo)">
                                                            <i class="fa fa-trash"></i>
                                                            <span>Eliminar</span>
                                                        </button>
                                                    </td>
                                                </tr>
                                    }
                                    </tbody>
                                </table>

                                <!-- Paginación -->
                                <div class="pagination">
                                    <button @onclick="() => CargarPagina(1)" disabled="@(paginaActual == 1)">Primero</button>
                                    <button @onclick="() => CargarPagina(paginaActual - 1)" disabled="@(paginaActual == 1)">Anterior</button>
                                    <span>Página @paginaActual de @totalPaginas</span>
                                    <button @onclick="() => CargarPagina(paginaActual + 1)" disabled="@(paginaActual == totalPaginas)">Siguiente</button>
                                    <button @onclick="() => CargarPagina(totalPaginas)" disabled="@(paginaActual == totalPaginas)">Último</button>
                                </div>
                        }
                    </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@if (mostrarModalEditar)
{
    <div class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document" style="width: 600px">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Artículo</h5>
                    <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Código</label>
                        <input class="form-control" value="@ArticuloAEditar.IdArticulo" disabled />
                    </div>

                    <div class="form-group">
                        <label>Nombre</label>
                        <textarea class="form-control"
                              @bind="@ArticuloAEditar.Articulo" disabled
                              maxlength="200"
                              style="resize: none; overflow-y: auto; min-height: 40px; max-height: 200px;">
                        </textarea>
                    </div>

                    <div class="form-group">
                        <label>Unidad de Medida</label>
                        <select class="form-control" @bind="ArticuloAEditar.IdUniMed">
                            <option value="">-- Seleccione unidad --</option>
                            @foreach (var unidad in listaUnidadMedida)
                            {
                                <option value="@unidad.Codigo">@unidad.Descripcion</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Grupo</label>
                        <select class="form-control" @onchange="ActualizarCtaContable">
                            <option value="">-- Seleccione un grupo --</option>
                            @foreach (var grupo in listaGrupo)
                            {
                                <option value="@grupo.Codigo" selected="@(grupo.Codigo == ArticuloAEditar.IdGrupo)">
                                    @grupo.Descripcion
                                </option>
                            }
                        </select>

                    </div>

                    <div class="form-group">
                        <label>Cuenta Contable</label>
                        <input class="form-control" value="@ArticuloAEditar.CtaContable" disabled />
                    </div>


                    <div class="form-group">
                        <label>Afecto IGV</label>
                        <select class="form-control" @bind="ArticuloAEditar.AfectoIGV">
                            <option value="1">Sí</option>
                            <option value="0">No</option>
                        </select>
                    </div>


                    <div class="form-group">
                        <label>Afecto Kárdex</label>
                        <select class="form-control" @bind="ArticuloAEditar.AfectoKardex">
                            <option value="1">Sí</option>
                            <option value="0">No</option>
                        </select>
                    </div>


                    <div class="form-group">
                        <label>Activo</label>
                        <select class="form-control" @bind="ArticuloAEditar.Activo">
                            <option value="1">Sí</option>
                            <option value="0">No</option>
                        </select>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                    <button class="btn btn-success" @onclick="GuardarArticuloEditar">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}


@if (mostrarModalNuevo)
{
        <div class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg modal-dialog-centered" role="document" style="width: 400px">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Agregar Artículo</h5>
                        <button type="button" class="close" @onclick="CerrarModalNuevo">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="d-flex justify-content-center">


                        <div class="form-group">
                            <label>Nombre</label>
                            <input class="form-control" @bind="@ArticuloNuevo.Nombre" />
                        </div>

                        <div class="form-group">
                            <label>Unidad de Medida</label>
                            <select class="form-control" @bind="ArticuloNuevo.IdUniMed">
                                <option value="0">-- Seleccione unidad --</option>
                                @foreach (var unidad in listaUnidadMedida)
                                {
                                    <option value="@unidad.Codigo">@unidad.Descripcion</option>
                                }
                            </select>
                        </div>


                        <div class="form-group">
                            <label>Grupo</label>
                            <select class="form-control" @onchange="ActualizarCtaContable">
                                <option value="0">-- Seleccione grupo --</option>
                                @foreach (var grupo in listaGrupo)
                                {
                                    <option value="@grupo.Codigo" selected="@(grupo.Codigo == ArticuloNuevo.IdGrupo)">
                                        @grupo.Descripcion
                                    </option>
                                }
                            </select>
                        </div>


                        <div class="form-group">
                            <label>Cuenta Contable</label>
                            <input class="form-control" value="@ArticuloNuevo.CtaContable" disabled />
                        </div>


                        <div class="form-group">
                            <label>Afecto IGV</label>
                            <select class="form-control" @bind="ArticuloNuevo.AfectoIGV">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>
                        </div>


                        <div class="form-group">
                            <label>Afecto Kárdex</label>
                            <select class="form-control" @bind="ArticuloNuevo.AfectoKardex">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>
                        </div>

                        </div>

                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CerrarModalNuevo">Cancelar</button>
                            <button class="btn btn-success" @onclick="GuardarArticuloNuevo">Guardar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
}


@if (mostrarModalAlerta)
{
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
            <div class="modal-dialog modal-dialog-centered" style="max-width: 302px; max-height: 151px;">
                <div class="modal-content rounded-4">
                    <div class="modal-header @(esErrorAlerta ? "bg-danger" : "bg-green") text-white">
                        <h5 class="modal-title">@tituloAlerta</h5>

                        <button type="button" class="btn-close" @onclick="() => mostrarModalAlerta = false" style="border: none; background: none;"></button>
                    </div>
                    <div class="modal-body d-flex justify-content-center align-items-center" style="height: 100%;">
                        <p class="text-center">@mensajeAlerta</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="() => mostrarModalAlerta = false">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
}

<style>

    /* Ocultar*/
    .hidden-column {
        display: none;
    }
  
    .form-container {
        width: 250px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .form-container label {
        align-self: start;
        margin-bottom: 4px;
        font-weight: 500;
    }

    .form-container .form-control {
        width: 100%;
        margin-bottom: 12px;
     }

</style>



@code {

    APILEON api = new();

    private List<ArticuloDBModel> listaArticulo = new();

    private List<ArticuloDBModel> grupoFiltrados = new();
    private List<ArticuloDBModel> grupoPaginados = new();


    private int paginaActual = 1;
    private int grupoPorPagina = 10;
    private int totalPaginas = 1;

    private string mensaje = "";
    private string busqueda = string.Empty;

    private ArticuloCreateModel ArticuloNuevo = new();
    private ArticuloEditModel ArticuloAEditar = new();

    private bool mostrarModalNuevo = false;
    private bool mostrarModalEditar = false;

    private bool mostrarModalAlerta = false;
    private string tituloAlerta = "";
    private string mensajeAlerta = "";
    private bool esErrorAlerta = false;

    private bool esEdicion = false;


    private List<UnidadMedidaModel> listaUnidadMedida = new();
    private List<GrupoModel> listaGrupo = new();

    private string Usuario = "";

    protected override async Task OnInitializedAsync()
    {
        await ClaimsService.InitializeAsync();
        Usuario = ClaimsService.GetDatoTrabajadorByIdUser("SIdUser");

        await CargarArticulo();
        FiltrarYPaginar();

    }

    private void FiltrarYPaginar()
    {
        // Filtra productos
        grupoFiltrados = string.IsNullOrWhiteSpace(busqueda)
            ? listaArticulo
            : listaArticulo.Where(p =>
                !string.IsNullOrWhiteSpace(p.Articulo) &&
                p.Articulo.Contains(busqueda, StringComparison.OrdinalIgnoreCase))
              .ToList();

        // Recalcula páginas
        totalPaginas = (int)Math.Ceiling((double)grupoFiltrados.Count / grupoPorPagina);

        // Corrige página actual si está fuera de rango
        if (paginaActual > totalPaginas)
            paginaActual = totalPaginas;

        if (paginaActual < 1)
            paginaActual = 1;

        // Paginado
        grupoPaginados = grupoFiltrados
            .Skip((paginaActual - 1) * grupoPorPagina)
            .Take(grupoPorPagina)
            .ToList();
    }

    private void AlBuscar(ChangeEventArgs e)
    {
        busqueda = e.Value?.ToString() ?? string.Empty;
        paginaActual = 1; 
        FiltrarYPaginar();
    }

    private void CargarPagina(int pagina)
    {
        paginaActual = pagina;
        FiltrarYPaginar();
    }

    private async Task CargarArticulo()
    {
        try
        {
            var resultado = await api.APILEONGET<Respuesta<List<ArticuloDBModel>>>("/api/Logistica/Articulos/ObtenerArticulos?tipoOperacion=1");

            if (resultado != null && resultado.Exito == 1)
            {
                listaArticulo = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudieron obtener los grupos ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }


    private void MostrarAlerta(string titulo, string mensaje)
    {
        tituloAlerta = titulo;
        mensajeAlerta = mensaje;
        mostrarModalAlerta = true;
        StateHasChanged();
    }

    private async Task ObtenerComboGrupo()
    {
        try
        {
            var resultado = await api.APILEONGET<Respuesta<List<GrupoModel>>>("/api/Logistica/Articulos/ObtenerComboGrupo");

            if (resultado != null && resultado.Exito == 1)
            {
                listaGrupo = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudieron obtener los grupos ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }

    private void ActualizarCtaContable(ChangeEventArgs e)
    {
        var nuevoIdGrupo = e.Value?.ToString();

        var grupo = listaGrupo.FirstOrDefault(g => g.Codigo == nuevoIdGrupo);

        if (grupo != null)
        {
            if (esEdicion)
            {
                ArticuloAEditar.IdGrupo = nuevoIdGrupo;
                ArticuloAEditar.CtaContable = grupo.CtaContable;
            }
            else
            {
                ArticuloNuevo.IdGrupo = nuevoIdGrupo;
                ArticuloNuevo.CtaContable = grupo.CtaContable;
            }
        }
    }



    private async Task ObtenerComboUnidadMedida()
    {
        try
        {
            var resultado = await api.APILEONGET<Respuesta<List<UnidadMedidaModel>>>("/api/Logistica/Articulos/ObtenerComboUnidadMedida");

            if (resultado != null && resultado.Exito == 1)
            {
                listaUnidadMedida = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudieron obtener las unidades de medida ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task AbrirModalEditarArticulo(ArticuloDBModel articulo)
    {
        esEdicion = true;

        if (articulo == null)
        {
            MostrarAlerta("Error", "Articulo no encontrado ❌");
            esErrorAlerta = true;
            return;
        }

        ArticuloAEditar = new ArticuloEditModel
            {
                IdArticulo = articulo.Codigo,
                Articulo= articulo.Articulo,
                IdGrupo=articulo.IdGrupo,
                IdUniMed=articulo.IdUniMed,
                CtaContable= articulo.CtaContable,
                AfectoIGV=articulo.AfectoIGV,
                AfectoKardex=articulo.AfectoKardex,
                Usuario = Usuario,
                Activo = articulo.Activo
            };



        await ObtenerComboGrupo();
        await ObtenerComboUnidadMedida();

        mostrarModalEditar = true;
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
    }

    private void CerrarModalNuevo()
    {
        mostrarModalNuevo = false;
    }


    private async Task GuardarArticuloEditar()
    {
        try
        {
            var api = new APILEON();

            var resultado = await api.APILEONPUT<Respuesta<string>>("/api/Logistica/Articulos/EditarArticulo", new
            {
                IdArticulo = ArticuloAEditar.IdArticulo,
                IdGrupo = ArticuloAEditar.IdGrupo,
                IdUniMed = ArticuloAEditar.IdUniMed,
                AfectoIGV = ArticuloAEditar.AfectoIGV,
                AfectoKardex = ArticuloAEditar.AfectoKardex,
                Usuario = ArticuloAEditar.Usuario,
                Activo = ArticuloAEditar.Activo
            });

            if (resultado != null && resultado.Exito == 1)
            {
                MostrarAlerta("Éxito", "Artículo actualizado correctamente ✅");
                esErrorAlerta = false;
            }
            else
            {
                MostrarAlerta("Error", "Error al actualizar Artículo ❌");
                esErrorAlerta = true;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }

        mostrarModalEditar = false;
        await CargarArticulo();
        FiltrarYPaginar();
    }


    private async Task AbrirModalNuevo()
    {
        esEdicion = false;

        await ObtenerComboGrupo();
        await ObtenerComboUnidadMedida();

        ArticuloNuevo = new ArticuloCreateModel
            {
                Nombre = "",
                IdGrupo = "0", 
                IdUniMed = "0",
                CtaContable = "",
                AfectoIGV = "0",
                AfectoKardex = "0",
                Usuario = Usuario
            };

        mostrarModalNuevo = true;
    }


    private async Task GuardarArticuloNuevo()
    {
        try
        {
            var api = new APILEON();

            var response = await api.APILEONPOST<Respuesta<string>>("/api/Logistica/Articulos/InsertarArticulo", new
            {
                Nombre = ArticuloNuevo.Nombre,
                IdGrupo = ArticuloNuevo.IdGrupo,
                IdUniMed = ArticuloNuevo.IdUniMed,
                AfectoIGV = ArticuloNuevo.AfectoIGV,
                AfectoKardex = ArticuloNuevo.AfectoKardex,
                Usuario = ArticuloNuevo.Usuario
            });


            if (response.Exito == 1)
            {
                MostrarAlerta("Éxito", "Artículo registrado correctamente ✅");
                esErrorAlerta = false;
            }
            else
            {
                MostrarAlerta("Error", "Error al registrar Artículo ❌");
                esErrorAlerta = true;
            }

        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }

        mostrarModalNuevo = false;
        await CargarArticulo();
        FiltrarYPaginar();
    }


    private async Task EliminarArticulo(ArticuloDBModel articulo)
    {
        try
        {
            var ArticuloAEliminar = new ArticuloUpdateModel
                {
                    IdArticulo = articulo.Codigo,
                    Usuario = Usuario
                };

            var api = new APILEON();

            var response = await api.APILEONPUT<Respuesta<string>>("/api/Logistica/Articulos/DesactivarArticulo", ArticuloAEliminar);

            if (response.Exito == 1)
            {
                MostrarAlerta("Éxito", "Artículo eliminado correctamente ✅");
                esErrorAlerta = false;
                await CargarArticulo();
                FiltrarYPaginar();
            }
            else
            {
                MostrarAlerta("Error", "Error al eliminar artículo ❌");
                esErrorAlerta = true;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }
    }



    public class ArticuloDBModel
    {
        public string Codigo { get; set; }

        public string IdUniMed { get; set; }

        public string UnidadMedida { get; set; }

        public string Articulo { get; set; }

        public string AfectoIGV { get; set; }

        public string IdGrupo { get; set; }

        public string Grupo { get; set; }

        public string CtaContable { get; set; }

        public string AfectoKardex { get; set; }

        public string Usuario { get; set; }

        public string FechaRegistro { get; set; }

        public string Activo { get; set; }
    }

    public class ArticuloCreateModel
    {
        public string Nombre { get; set; }

        public string IdGrupo { get; set; }

        public string IdUniMed { get; set; }

        public string CtaContable { get; set; }

        public string AfectoIGV { get; set; }

        public string AfectoKardex { get; set; }

        public string Usuario { get; set; }
    }


    public class ArticuloUpdateModel
    {
        public string IdArticulo { get; set; }

        public string Usuario { get; set; }
    }

    public class ArticuloEditModel
    {
        public string IdArticulo { get; set; }

        public string Articulo { get; set; }

        public string IdGrupo { get; set; }

        public string IdUniMed { get; set; }

        public string CtaContable { get; set; }

        public string AfectoIGV { get; set; }

        public string AfectoKardex { get; set; }

        public string Usuario { get; set; }

        public string Activo { get; set; }
    }


    public class UnidadMedidaModel
    {
        public string Codigo { get; set; }
        public string Descripcion { get; set; }


        public string Usuario { get; set; }
        public string FechaRegistro { get; set; }
        public string Activo { get; set; }
    }

    public class GrupoModel
    {
        public string Codigo { get; set; }

        public string Descripcion { get; set; }

        public string CtaContable { get; set; }

        public string Usuario { get; set; }
        public string FechaRegistro { get; set; }
        public string Activo { get; set; }
    }



}