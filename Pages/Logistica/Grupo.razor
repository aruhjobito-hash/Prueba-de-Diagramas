@page "/Grupo"
@inject HttpClient Http

@using System.Linq


@using Models.Sistema
@using Clases.Sistema
@using Controllers.Sistema

@using System.Security.Claims
@using LeonXIIICore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClaimsService ClaimsService



<div class="row">
    <div class="col-md-12">
        <div class="portlet light portlet-fit">

            <div class="header-grupo-plantilla">
                <div class="caption mb-0">
                    <i class="icon-settings"></i>
                    <span class="titulo-seccion-plantilla">CONFIGURACIÓN DE GRUPOS</span>
                </div>

                <div class="actions">

                </div>
            </div>

            <div class="blazor-content portlet-body">

                <div class="row mt-3 mb-3">
                    <div class="col-md-6">
                        <input type="text" class="form-control search-input" placeholder="Buscar Descripción..." @oninput="AlBuscar" />
                    </div>
                    <div class="col-md-6 text-right">
                        <button class="btn green" @onclick="AbrirModalNuevo">
                            Nuevo Producto <i class="fa fa-plus"></i>
                        </button>
                    </div>
                </div>

                <div class="portlet-body" >
                    @if (grupoPaginados == null)
                    {
                        <p>Cargando productos...</p>
                    }
                    else
                    {
                        <table class="table table-striped table-hover table-bordered tabla-centro" id="tabla_productos">
                            <thead>
                                <tr>
                                    <th>CÓDIGO</th>
                                    <th>DESCRIPCIÓN</th>
                                    <th>CUENTA CONTABLE</th>
                                    <th>ACTIVO FIJO</th>
                                    <th>KÁRDEX</th>
                                    <th>TASA DEPRECIACIÓN</th>
                                    <th class="hidden-column">USUARIO</th>
                                    <th>FECHA REGISTRO</th>
                                    <th>ESTADO</th>
                                    <th>ACCIONES</th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var grupo in grupoPaginados)
                                {
                                    <tr>
                                        <td>@grupo.Codigo</td>
                                        <td>@grupo.Descripcion</td>
                                        <td>@grupo.CtaContable</td>
                                        <td>@(grupo.ActivoFijo == "1" ? "Sí" : "No")</td>
                                        <td>@(grupo.Kardex == "1" ? "Sí" : "No")</td>
                                        <td style="max-width=100px">@grupo.TasaDepreciacion.ToString("N2")</td>
                                        <td class="hidden-column">@grupo.Usuario</td>
                                        <td>@grupo.FechaRegistro</td>
                                        <td>@(grupo.Activo == "1" ? "Activo" : "Inactivo")</td>
                                        <td class="center">
                                            <button class="btn btn-sm btn-primary d-flex align-items-center gap-1" @onclick="() => AbrirModalEditarGrupo(grupo)">
                                                <i class="fa fa-edit"></i>
                                                <span>Editar</span>
                                            </button>
                                            <button class="btn btn-sm btn-danger d-flex align-items-center gap-1 mt-1" @onclick="() => EliminarGrupo(grupo)">
                                                <i class="fa fa-trash"></i>
                                                <span>Eliminar</span>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <div class="pagination">
                            <button @onclick="() => CargarPagina(1)" disabled="@(paginaActual == 1)">Primero</button>
                            <button @onclick="() => CargarPagina(paginaActual - 1)" disabled="@(paginaActual == 1)">Anterior</button>
                            <span>Página @paginaActual de @totalPaginas</span>
                            <button @onclick="() => CargarPagina(paginaActual + 1)" disabled="@(paginaActual == totalPaginas)">Siguiente</button>
                            <button @onclick="() => CargarPagina(totalPaginas)" disabled="@(paginaActual == totalPaginas)">Último</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@if (mostrarModalEditar)
{
    <div class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document" style="width: 300px">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Grupo</h5>
                    <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="form-container">

                            <label>Código</label>
                            <input type="text" class="form-control mb-2" value="@GrupoAEditar.IdGrupo" disabled />

                            <label>Descripción</label>
                            <input type="text" class="form-control mb-2" value="@GrupoAEditar.Descripcion" disabled />

                            <label>Cuenta Contable</label>
                            <input type="text" class="form-control mb-2" value="@GrupoAEditar.CtaContable" disabled />

                            <label>Activo Fijo</label>
                            <select class="form-control mb-2" @bind="@GrupoAEditar.ActivoFijo">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                            <label>Kárdex</label>
                            <select class="form-control mb-2" @bind="@GrupoAEditar.Kardex">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                            <label>Tasa Depreciación</label>
                            <input type="text"
                               class="form-control mb-2"
                               @bind="@GrupoAEditar.TasaDepreciacion"
                               oninput="this.value = this.value .replace(/[^0-9.]/g, '') .replace(/^([^.]*\.[0-9]{2}).*$/, '$1');" />

                            <label>Estado</label>
                            <select class="form-control mb-2" @bind="@GrupoAEditar.Activo">
                                <option value="1">Activo</option>
                                <option value="0">Inactivo</option>
                            </select>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button class="btn btn-success" @onclick="GuardarGrupoEditar">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if (mostrarModalNuevo)
{
    <div class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document" style="width: 400px">
            <div class="modal-content" style="width: 300px">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar Grupo</h5>
                    <button type="button" class="close" @onclick="CerrarModalNuevo">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="form-container">

                            <label>Descripción</label>
                            <input type="text" class="form-control mb-2" @bind="@GrupoNuevo.Descripcion" />

                            <label>Activo Fijo</label>
                            <select class="form-control mb-2" @bind="@GrupoNuevo.ActivoFijo">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                            <label>Kárdex</label>
                            <select class="form-control mb-2" @bind="@GrupoNuevo.Kardex">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                            <label>Tasa Depreciación</label>
                            <input type="text"
                               class="form-control mb-2"
                               @bind="@GrupoNuevo.TasaDepreciacion"
                               oninput="this.value = this.value .replace(/[^0-9.]/g, '') .replace(/^([^.]*\.[0-9]{2}).*$/, '$1');" />

                            <label>Cuenta Contable</label>
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" value="@GrupoNuevo.CtaContable" disabled />

                                <label>Cuenta Contable por Descripción</label>
                                <input type="text" class="form-control mb-2" @bind="filtroCuenta" placeholder="Buscar por Descripción..." />

                                <button class="btn btn-outline-secondary" type="button" @onclick="FiltrarCuentasContables">
                                    Buscar Cuenta
                                </button>
                            </div>


                        </div>
                    </div>

                    <br>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CerrarModalNuevo">Cancelar</button>
                        <button class="btn btn-success" @onclick="GuardarGrupoNuevo">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if (mostrarModalBuscarCta)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog" style="max-width: 500px;">
            <div class="modal-content" style="height: 700px;">
                <div class="modal-header">
                    <h5 class="modal-title">Seleccionar Cuenta Contable</h5>
                </div>
                <div class="modal-body" style="overflow-y: auto;">

                    <table class="table table-sm table-hover tabla-centro">
                        <thead class="table-light">
                            <tr>
                                <th>Cuenta Contable</th>
                                <th>Descripción</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (listaPlanCuentas != null && listaPlanCuentas.Any())
                            {
                                @foreach (var cuenta in listaPlanCuentas)
                                {
                                    <tr style="cursor:pointer;" @onclick="() => SeleccionarCtaContable(cuenta)">
                                        <td>@cuenta.CtaContable</td>
                                        <td>@cuenta.Descripcion</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr><td colspan="2">No hay resultados</td></tr>
                            }
                        </tbody>
                    </table>
                </div>

                
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => mostrarModalBuscarCta = false">Cancelar</button>
                </div>

            </div>
        </div>
    </div>

}



@if (mostrarModalAlerta)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered" style="max-width: 302px; max-height: 151px;">
            <div class="modal-content rounded-4">
                <div class="modal-header @(esErrorAlerta ? "bg-danger" : "bg-green") text-white">
                    <h5 class="modal-title">@tituloAlerta</h5>

                    <button type="button" class="btn-close" @onclick="() => mostrarModalAlerta = false" style="border: none; background: none;"></button>
                </div>
                <div class="modal-body d-flex justify-content-center align-items-center" style="height: 100%;">
                    <p class="text-center">@mensajeAlerta</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => mostrarModalAlerta = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

<style>


    /* Ocultar*/
    .hidden-column {
        display: none;
    }

    .form-container {
        width: 250px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .form-container label {
        align-self: start;
        margin-bottom: 4px;
        font-weight: 500;
    }

    .form-container .form-control {
        width: 100%;
        margin-bottom: 12px;
     }

</style>



@code {

    APILEON api = new();

    private List<GrupoModel> listaGrupo = new();

    private List<GrupoModel> grupoFiltrados = new();
    private List<GrupoModel> grupoPaginados = new();

    private int paginaActual = 1;
    private int grupoPorPagina = 10;
    private int totalPaginas = 1;

    private string mensaje = "";
    private string busqueda = string.Empty;

    private GrupoCreateModel GrupoNuevo = new();
    private GrupoEditModel GrupoAEditar = new();

    private bool mostrarModalNuevo = false;
    private bool mostrarModalEditar = false;

    private bool mostrarModalAlerta = false;
    private string tituloAlerta = "";
    private string mensajeAlerta = "";
    private bool esErrorAlerta = false;

    private bool esEdicion = false;

    private string filtroCuenta = string.Empty;
    private List<PlanCuentasModel> listaPlanCuentas = new();


    private bool mostrarModalBuscarCta = false;

    private string Usuario = "";

    protected override async Task OnInitializedAsync()
    {
        await ClaimsService.InitializeAsync();

        Usuario = ClaimsService.GetDatoTrabajadorByIdUser("SIdUser");
        
        
        await CargarGrupo();
        FiltrarYPaginar();

    }

    private void FiltrarYPaginar()
    {
        grupoFiltrados = string.IsNullOrWhiteSpace(busqueda)
            ? listaGrupo
            : listaGrupo.Where(p =>
                !string.IsNullOrWhiteSpace(p.Descripcion) &&
                p.Descripcion.Contains(busqueda, StringComparison.OrdinalIgnoreCase))
              .ToList();

        totalPaginas = (int)Math.Ceiling((double)grupoFiltrados.Count / grupoPorPagina);

        if (paginaActual > totalPaginas)
            paginaActual = totalPaginas;

        if (paginaActual < 1)
            paginaActual = 1;

        grupoPaginados = grupoFiltrados
            .Skip((paginaActual - 1) * grupoPorPagina)
            .Take(grupoPorPagina)
            .ToList();
    }

    private void AlBuscar(ChangeEventArgs e)
    {
        busqueda = e.Value?.ToString() ?? string.Empty;
        paginaActual = 1;
        FiltrarYPaginar();
    }

    private void CargarPagina(int pagina)
    {
        paginaActual = pagina;
        FiltrarYPaginar();
    }


    private async Task CargarGrupo()
    {
        try
        {
            var resultado = await api.APILEONGET<Respuesta<List<GrupoModel>>>("/api/Logistica/Articulos/ObtenerGrupo?tipoOperacion=1");

            if (resultado != null && resultado.Exito == 1)
            {
                listaGrupo = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudieron obtener los grupos ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }


    private async Task CargarPlanCuentas()
    {
        try
        {

            string filtro = filtroCuenta ?? "";

            var resultado = await api.APILEONGET<Respuesta<List<PlanCuentasModel>>>($"/api/Logistica/Articulos/ObtenerPlanCuentas?filtrocuenta={filtro}");

            if (resultado != null && resultado.Exito == 1)
            {
                listaPlanCuentas = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudieron obtener las cuentas contables ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }


    private async Task FiltrarCuentasContables()
    {
        await CargarPlanCuentas();
        mostrarModalBuscarCta = true;
    }


    private void SeleccionarCtaContable(PlanCuentasModel cuenta)
    {
        GrupoNuevo.CtaContable = cuenta.CtaContable;
        filtroCuenta = string.Empty;
        listaPlanCuentas.Clear();
        mostrarModalBuscarCta = false;
    }


    private void MostrarAlerta(string titulo, string mensaje)
    {
        tituloAlerta = titulo;
        mensajeAlerta = mensaje;
        mostrarModalAlerta = true;
        StateHasChanged();
    }

    private async Task AbrirModalEditarGrupo(GrupoModel grupo)
    {

        esEdicion = true;

        if (grupo == null)
        {
            MostrarAlerta("Error", "Grupo no encontrado ❌");
            esErrorAlerta = true;
            return;
        }

        GrupoAEditar = new GrupoEditModel
            {
                IdGrupo = grupo.Codigo,
                TasaDepreciacion = Math.Round(grupo.TasaDepreciacion, 2),
                Usuario = Usuario,
                Activo = grupo.Activo,
                Descripcion = grupo.Descripcion,
                CtaContable = grupo.CtaContable,
                ActivoFijo = grupo.ActivoFijo,
                Kardex= grupo.Kardex
            };

        mostrarModalEditar = true;
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
    }

    private void CerrarModalNuevo()
    {
        filtroCuenta = string.Empty;
        listaPlanCuentas.Clear();
        mostrarModalNuevo = false;
    }


    private async Task GuardarGrupoEditar()
    {
        try
        {
            var api = new APILEON();

            var resultado = await api.APILEONPUT<Respuesta<string>>("/api/Logistica/Articulos/EditarGrupo", new
            {
                IdGrupo = GrupoAEditar.IdGrupo,
                TasaDepreciacion = GrupoAEditar.TasaDepreciacion,
                Usuario = GrupoAEditar.Usuario,
                Activo = GrupoAEditar.Activo,
                ActivoFijo = GrupoAEditar.ActivoFijo,
                Kardex = GrupoAEditar.Kardex
            });

            if (resultado != null && resultado.Exito == 1)
            {
                MostrarAlerta("Éxito", "Grupo actualizado correctamente ✅");
                esErrorAlerta = false;
            }
            else
            {
                MostrarAlerta("Error", "Error al actualizar Grupo ❌");
                esErrorAlerta = true;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }

        mostrarModalEditar = false;
        await CargarGrupo();
        FiltrarYPaginar();
    }

    private async Task AbrirModalNuevo()
    {

        esEdicion = false;

        GrupoNuevo = new GrupoCreateModel
            {

                Descripcion = "",
                CtaContable= "",
                TasaDepreciacion = 0,
                Usuario = Usuario,
                ActivoFijo="1",
                Kardex= "1"
            };

        filtroCuenta = ""; 
        mostrarModalNuevo = true;

    }

    private async Task GuardarGrupoNuevo()
    {
        try
        {
            var api = new APILEON();

            var response = await api.APILEONPOST<Respuesta<string>>("/api/Logistica/Articulos/InsertarGrupo", new
            {
                Descripcion = GrupoNuevo.Descripcion,
                CtaContable = GrupoNuevo.CtaContable,
                TasaDepreciacion = GrupoNuevo.TasaDepreciacion,
                Usuario = GrupoNuevo.Usuario,
                ActivoFijo = GrupoNuevo.ActivoFijo,
                Kardex= GrupoNuevo.Kardex
            });


            if (response.Exito == 1)
            {
                MostrarAlerta("Éxito", "Grupo registrado correctamente ✅");
                esErrorAlerta = false;
            }
            else
            {
                MostrarAlerta("Error", "Error al registrar Grupo ❌");
                esErrorAlerta = true;
            }

        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }

        mostrarModalNuevo = false;
        await CargarGrupo();
        FiltrarYPaginar();
    }


    private async Task EliminarGrupo(GrupoModel grupo)
    {
        try
        {
            var grupoAEliminar = new GrupoUpdateModel
            {
                IdGrupo = grupo.Codigo,
                Usuario = Usuario
            };

            var api = new APILEON();

            var response = await api.APILEONPUT<Respuesta<string>>("/api/Logistica/Articulos/DesactivarGrupo", grupoAEliminar);

            if (response.Exito == 1)
            {
                MostrarAlerta("Éxito", "Grupo eliminado correctamente ✅");
                esErrorAlerta = false;
                await CargarGrupo();
                FiltrarYPaginar();
            }
            else
            {
                MostrarAlerta("Error", "Error al eliminar Grupo ❌");
                esErrorAlerta = true;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }
    }


    public class GrupoModel
    {
        public string Codigo { get; set; }

        public string Descripcion { get; set; }

        public string CtaContable { get; set; }

        public decimal TasaDepreciacion { get; set; }

        public string Usuario { get; set; }
        public string FechaRegistro { get; set; }
        public string Activo { get; set; }
        public string ActivoFijo { get; set; }

        public string Kardex { get; set; }
    }

    public class GrupoCreateModel
    {
        public string Descripcion { get; set; }

        public string CtaContable { get; set; }

        public decimal TasaDepreciacion { get; set; }

        public string Usuario { get; set; }

        public string ActivoFijo { get; set; }

        public string Kardex { get; set; }
    }


    public class GrupoUpdateModel
    {
        public string IdGrupo { get; set; }

        public string Usuario { get; set; }
    }

    public class GrupoEditModel
    {
        public string IdGrupo { get; set; }

        public decimal TasaDepreciacion { get; set; }

        public string Usuario { get; set; }

        public string Activo { get; set; }

        public string Descripcion { get; set; }

        public string CtaContable { get; set; }

        public string ActivoFijo { get; set; }

        public string Kardex { get; set; }
    }

    public class PlanCuentasModel
    {

        public string CtaContable { get; set; }
        public string Descripcion { get; set; }


    }




}