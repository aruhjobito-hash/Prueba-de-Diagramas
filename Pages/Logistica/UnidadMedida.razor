
@page "/UnidadMedida"
@inject HttpClient Http

@using System.Linq

@using Models.Sistema
@using Clases.Sistema
@using Controllers.Sistema

@using System.Security.Claims
@using LeonXIIICore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClaimsService ClaimsService

<div class="row">
    <div class="col-md-12">
        <div class="portlet light portlet-fit">

             <div class="header-grupo-plantilla">
                <div class="caption mb-0">
                    <i class="icon-settings"></i>
                    <span class="titulo-seccion-plantilla">CONFIGURACIÓN DE UNIDAD DE MEDIDA</span>
                </div>

                <div class="actions">

                </div>
            </div>


            <div class="blazor-content portlet-body">

                <div class="row mt-3 mb-3">
                    <div class="col-md-6">
                        <input type="text" class="form-control search-input" placeholder="Buscar Descripción..." @oninput="AlBuscar" />
                    </div>
                    <div class="col-md-6 text-right">
                        <button class="btn green" @onclick="AbrirModalNuevo">
                            Nuevo Unidad de Medida <i class="fa fa-plus"></i>
                        </button>
                    </div>
                </div>


                <div class="portlet-body">
                    @if (unidadMedidaPaginados == null)
                    {
                        <p>Cargando productos...</p>
                    }
                    else
                    {
                        <table class="table table-striped table-hover table-bordered tabla-centro" id="tabla_productos">
                            <thead>
                                <tr>
                                    <th>CÓDIGO</th>
                                    <th>DESCRIPCIÓN</th>
                                    <th class="hidden-column">USUARIO</th>
                                    <th>FECHA REGISTRO</th>
                                    <th>ACTIVO</th>
                                    <th>ACCIONES</th>
                              
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var unidadMedida in unidadMedidaPaginados)
                                {
                                    <tr>
                                        <td>@unidadMedida.Codigo</td>
                                        <td>@unidadMedida.Descripcion</td>
                                        <td class="hidden-column">@unidadMedida.Usuario</td>
                                        <td>@unidadMedida.FechaRegistro</td>
                                        <td>@(unidadMedida.Activo == "1" ? "Sí" : "No")</td>
                                        <td class="center">
                                            <button class="btn btn-sm btn-primary d-flex align-items-center gap-1" @onclick="() => AbrirModalEditarUnidadMedida(unidadMedida)">
                                                <i class="fa fa-edit"></i>
                                                <span>Editar</span>
                                            </button>
                                            <button class="btn btn-sm btn-danger d-flex align-items-center gap-1 mt-1" @onclick="() => EliminarUnidadMedida(unidadMedida)">
                                                <i class="fa fa-trash"></i>
                                                <span>Eliminar</span>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <!-- Paginación --->
                        <div class="pagination">
                            <button @onclick="() => CargarPagina(1)" disabled="@(paginaActual == 1)">Primero</button>
                            <button @onclick="() => CargarPagina(paginaActual - 1)" disabled="@(paginaActual == 1)">Anterior</button>
                            <span>Página @paginaActual de @totalPaginas</span>
                            <button @onclick="() => CargarPagina(paginaActual + 1)" disabled="@(paginaActual == totalPaginas)">Siguiente</button>
                            <button @onclick="() => CargarPagina(totalPaginas)" disabled="@(paginaActual == totalPaginas)">Último</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@if (mostrarModalEditar)
{
    <div class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document" style="width: 300px">
            <div class="modal-content" >
                <div class="modal-header">
                    <h5 class="modal-title">Editar Unidad de Medida</h5>
                    <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                            <div class="form-container">

                            <label>Código</label>
                            <input type="text" class="form-control mb-2" value="@UnidadMedidaAEditar.IdUniMed" disabled />

                            <label>Descripción</label>
                            <input type="text" class="form-control mb-2" value="@UnidadMedidaAEditar.Descripcion" disabled />


                            <label>Estado</label>
                            <select class="form-control mb-2" @bind="@UnidadMedidaAEditar.Activo">
                                <option value="1">Activo</option>
                                <option value="0">Inactivo</option>
                            </select>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button class="btn btn-success" @onclick="GuardarUnidadMedidaEditar">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if (mostrarModalNuevo)
{
    <div class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document" style="width: 300px">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar Unidad de Medida</h5>
                    <button type="button" class="close" @onclick="CerrarModalNuevo">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="form-container">

                            <label>Descripción</label>
                            <input type="text" class="form-control mb-2" @bind="UnidadMedidaNuevo.Descripcion" />

                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CerrarModalNuevo">Cancelar</button>
                        <button class="btn btn-success" @onclick="GuardarUnidadMedidaNuevo">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if (mostrarModalAlerta)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered" style="max-width: 302px; max-height: 151px;">
            <div class="modal-content rounded-4">
                <div class="modal-header @(esErrorAlerta ? "bg-danger" : "bg-green") text-white">
                    <h5 class="modal-title">@tituloAlerta</h5>

                    <button type="button" class="btn-close" @onclick="() => mostrarModalAlerta = false" style="border: none; background: none;"></button>
                </div>
                <div class="modal-body d-flex justify-content-center align-items-center" style="height: 100%;">
                    <p class="text-center">@mensajeAlerta</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => mostrarModalAlerta = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

<style>


    /* Ocultar*/
    .hidden-column {
        display: none;
    }

    .form-container {
        width: 250px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .form-container label {
        align-self: start;
        margin-bottom: 4px;
        font-weight: 500;
    }

    .form-container .form-control {
        width: 100%;
        margin-bottom: 12px;
    }

</style>


                        
@code {

    APILEON api = new();

    private List<UnidadMedidaModel> listaUnidadMedida = new();

    private List<UnidadMedidaModel> unidadMedidaFiltrados = new();
    private List<UnidadMedidaModel> unidadMedidaPaginados = new();

    private int paginaActual = 1;
    private int unidadPorPagina = 10;
    private int totalPaginas = 1;

    private string mensaje = "";
    private string busqueda = string.Empty;

    private UnidadMedidaCreateModel UnidadMedidaNuevo = new();
    private UnidadMedidaEditModel UnidadMedidaAEditar = new();

    private bool mostrarModalNuevo = false;
    private bool mostrarModalEditar = false;

    private bool mostrarModalAlerta = false;
    private string tituloAlerta = "";
    private string mensajeAlerta = "";
    private bool esErrorAlerta = false;

    private bool esEdicion = false;

    private string Usuario = "";

    protected override async Task OnInitializedAsync()
    {
        await ClaimsService.InitializeAsync();

        Usuario = ClaimsService.GetDatoTrabajadorByIdUser("SIdUser");

        await CargarUnidadMedida();

        FiltrarYPaginar();

    }

    private void FiltrarYPaginar()
    {
        // Filtra productos
        unidadMedidaFiltrados = string.IsNullOrWhiteSpace(busqueda)
            ? listaUnidadMedida
            : listaUnidadMedida.Where(p =>
                !string.IsNullOrWhiteSpace(p.Descripcion) &&
                p.Descripcion.Contains(busqueda, StringComparison.OrdinalIgnoreCase))
              .ToList();

        // Recalcula páginas
        totalPaginas = (int)Math.Ceiling((double)unidadMedidaFiltrados.Count / unidadPorPagina);

        // Corrige página actual si está fuera de rango
        if (paginaActual > totalPaginas)
            paginaActual = totalPaginas;

        if (paginaActual < 1)
            paginaActual = 1;

        // Paginado
        unidadMedidaPaginados = unidadMedidaFiltrados
            .Skip((paginaActual - 1) * unidadPorPagina)
            .Take(unidadPorPagina)
            .ToList();
    }

    private void AlBuscar(ChangeEventArgs e)
    {
        busqueda = e.Value?.ToString() ?? string.Empty;
        paginaActual = 1; // Reinicia a primera página al buscar
        FiltrarYPaginar();
    }

    private void CargarPagina(int pagina)
    {
        paginaActual = pagina;
        FiltrarYPaginar();
    }

    private async Task CargarUnidadMedida()
    {
        try
        {
            var resultado = await api.APILEONGET<Respuesta<List<UnidadMedidaModel>>>("/api/Logistica/Articulos/ObtenerUnidadMedida?tipoOperacion=1"
            );

            if (resultado != null && resultado.Exito == 1)
            {
                listaUnidadMedida = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudieron obtener las unidades de medida ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }


    private void MostrarAlerta(string titulo, string mensaje)
    {
        tituloAlerta = titulo;
        mensajeAlerta = mensaje;
        mostrarModalAlerta = true;
        StateHasChanged();
    }

    private async Task AbrirModalEditarUnidadMedida(UnidadMedidaModel unidad)
    {
        if (unidad == null)
        {
            MostrarAlerta("Error", "Unidad de medida no encontrada ❌");
            esErrorAlerta = true;
            return;
        }

        UnidadMedidaAEditar = new UnidadMedidaEditModel
            {
                IdUniMed = unidad.Codigo,
                Usuario = Usuario,
                Activo = unidad.Activo,
                Descripcion = unidad.Descripcion
            };

        // Mostrar el modal de edición
        mostrarModalEditar = true;
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
    }

    private void CerrarModalNuevo()
    {
        mostrarModalNuevo = false;
    }


    private async Task GuardarUnidadMedidaEditar()
    {
        try
        {
            var data = new
            {
                IdUniMed = UnidadMedidaAEditar.IdUniMed,
                Usuario = UnidadMedidaAEditar.Usuario,
                Activo = UnidadMedidaAEditar.Activo
            };

            var resultado = await api.APILEONPUT<Respuesta<string>>("/api/Logistica/Articulos/EditarUnidadMedida", data
            );

            if (resultado != null && resultado.Exito == 1)
            {
                MostrarAlerta("Éxito", "Unidad de medida actualizada correctamente ✅");
                esErrorAlerta = false;
            }
            else
            {
                MostrarAlerta("Error", resultado?.Mensaje ?? "Error al actualizar Unidad de Medida ❌");
                esErrorAlerta = true;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }

        mostrarModalEditar = false;
        await CargarUnidadMedida();
        FiltrarYPaginar();
    }




    private async Task AbrirModalNuevo()
    {

        esEdicion = false;


        UnidadMedidaNuevo = new UnidadMedidaCreateModel
            {
                
                Descripcion = "",
                Usuario = Usuario
            };
        mostrarModalNuevo = true;

    }


    private async Task GuardarUnidadMedidaNuevo()
    {
        try
        {
            var data = new UnidadMedidaCreateModel()
            {
                Descripcion = UnidadMedidaNuevo.Descripcion,
                Usuario = UnidadMedidaNuevo.Usuario
            };

            var resultado = await api.APILEONPOST<Respuesta<string>>("/api/Logistica/Articulos/InsertarUnidadMedida", data
            );

            if (resultado != null && resultado.Exito == 1)
            {
                MostrarAlerta("Éxito", "Unidad de medida registrada correctamente ✅");
                esErrorAlerta = false;
            }
            else
            {
                MostrarAlerta("Error", resultado?.Mensaje ?? "Error al registrar Unidad de Medida ❌");
                esErrorAlerta = true;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }

        mostrarModalNuevo = false;
        await CargarUnidadMedida();
        FiltrarYPaginar();
    }


    private async Task EliminarUnidadMedida(UnidadMedidaModel unidadMedida)
    {
        try
        {
            var unidadAEliminar = new UnidadMedidaUpdateModel
                {
                    IdUniMed = unidadMedida.Codigo,
                    Usuario = Usuario
                };
            var resultado = await api.APILEONPUT<Respuesta<string>>("/api/Logistica/Articulos/DesactivarUnidadMedida", unidadAEliminar
            );
			
            if (resultado != null && resultado.Exito == 1)
            {
                MostrarAlerta("Éxito", "Unidad de medida eliminada correctamente ✅");
                esErrorAlerta = false;
                await CargarUnidadMedida();
                FiltrarYPaginar();
            }
            else
            {
                MostrarAlerta("Error", resultado?.Mensaje ?? "Error al eliminar Unidad de Medida ❌");
                esErrorAlerta = true;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }
    }

    public class UnidadMedidaModel
    {
        public string Codigo { get; set; }
        public string Descripcion { get; set; }


        public string Usuario { get; set; }
        public string FechaRegistro { get; set; }
        public string Activo { get; set; }
    }

    public class UnidadMedidaCreateModel
    {
        public string Descripcion { get; set; }

        public string Usuario { get; set; }
    }


    public class UnidadMedidaUpdateModel
    {
        public string IdUniMed { get; set; }

        public string Usuario { get; set; }
    }

    public class UnidadMedidaEditModel
    {
        public string IdUniMed { get; set; }

        public string Usuario { get; set; }

        public string Activo { get; set; }

        public string Descripcion { get; set; }
    }




}
