


@page "/ProductosCrediticios"
@inject HttpClient Http

@using System.Linq

@using Models.Sistema
@using Clases.Sistema
@using Controllers.Sistema

@using System.Security.Claims
@using LeonXIIICore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClaimsService ClaimsService


<div class="row">
    <div class="col-md-12">
        <div class="portlet light portlet-fit">

            <div class="header-grupo-plantilla">
                <div class="caption mb-0">
                    <i class="icon-settings"></i>
                    <span class="titulo-seccion-plantilla">CONFIGURACIÓN DE PRODUCTOS</span>
                </div>

                <div class="actions">

                </div>
            </div>


            <div class="blazor-content portlet-body">
                <div class="row mt-3 mb-3">
                    <div class="col-md-6">
                    <input type="text" class="form-control search-input" placeholder="Buscar Denominación..." @oninput="AlBuscar" />
                    </div>
                    <div class="col-md-6 text-right">
                        <button class="btn green" @onclick="AbrirModalNuevo">
                            Nuevo Producto <i class="fa fa-plus"></i>
                        </button>
                    </div>
                </div>

                <div class="portlet-body">
                    @if (productosPaginados == null)
                    {
                        <p>Cargando productos...</p>
                    }
                    else
                    {
                        <table class="table table-striped table-hover table-bordered tabla-centro" id="tabla_productos">
                            <thead>
                                <tr>
                                    <th class="hidden-column">ID PRODUCTO</th>
                                    <th>DENOMINACIÓN</th>
                                    <th>FECHA VIGENCIA</th>
                                    <th class="hidden-column">USUARIO</th>
                                    <th>MONTO MÍNIMO</th>
                                    <th>MONTO MÁXIMO</th>
                                    <th>DÍAS PLAZO PC</th>
                                    <th>DxP</th>
                                    <th>GARANTÍA</th>
                                    <th>PERIODO DE GRACIA</th>
                                    <th>% AMPLIACIÓN</th>
                                    <th style="width: 40px;">APROBACIÓN AUTOMÁTICA</th>
                                    <th>ACTIVO</th>
                                    <th>ACCIONES</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var producto in productosPaginados)
                                {
                                    <tr>
                                        <td class="hidden-column">@producto.IdDenoCre</td>
                                        <td>@producto.Denominacion</td>
                                        <td>@producto.FecVig</td>
                                        <td class="hidden-column">@producto.IdUser</td>
                                        <td>@producto.MontoMin.ToString("N2")</td>
                                        <td>@producto.MontoMax.ToString("N2")</td>
                                        <td>@producto.DiasPlazoPC</td>
                                        <td>@(producto.DxP == "1" ? "Sí" : "No")</td>
                                        <td>@(producto.sinGara == "1" ? "Sí" : "No")</td>
                                        <td>@(producto.PerGracia == 1 ? "Sí" : "No")</td>
                                        <td>@producto.PorcAmplia.ToString("N2")</td>
                                        <td>@(producto.AprobAuto == "1" ? "Sí" : "No")</td>
                                        <td>@(producto.Activo == "1" ? "Sí" : "No")</td>
                                        <td class="center">
                                            <button class="btn btn-icon-only blue" @onclick="() => AbrirModalEditarProducto(producto)">
                                                <i class="fa fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger" @onclick="() => EliminarProducto(producto)">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <!-- Paginación -->
                        <div class="pagination">
                            <button @onclick="() => CargarPagina(1)" disabled="@(paginaActual == 1)">Primero</button>
                            <button @onclick="() => CargarPagina(paginaActual - 1)" disabled="@(paginaActual == 1)">Anterior</button>
                            <span>Página @paginaActual de @totalPaginas</span>
                            <button @onclick="() => CargarPagina(paginaActual + 1)" disabled="@(paginaActual == totalPaginas)">Siguiente</button>
                            <button @onclick="() => CargarPagina(totalPaginas)" disabled="@(paginaActual == totalPaginas)">Último</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>



<!-- Modales -->
@if (mostrarModalNuevo)
{
    <!-- Modal de Nuevo Producto -->
    <div class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar Producto</h5>
                    <button type="button" class="close" @onclick="CerrarModalNuevo">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Columna izquierda -->
                        <div class="col-md-6">
                            <label>Denominación</label>
                            <input type="text" class="form-control mb-2" @bind="productoNuevo.Denominacion" />

                            <label>Abreviatura</label>
                            <input type="text" class="form-control mb-2" @bind="productoNuevo.Abrev" />

                            <label>Plazo PC</label>
                            <input type="number" class="form-control mb-2" @bind="productoNuevo.DiasPlazoPC" />

                            <label>DxP</label>
                            <select class="form-control mb-2" @bind="productoNuevo.DxP">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                            <label>Monto Mínimo</label>
                            <input type="text"
                               class="form-control mb-2"
                               @bind="productoNuevo.MontoMin"
                               oninput="this.value = this.value .replace(/[^0-9.]/g, '') .replace(/^([^.]*\.[0-9]{2}).*$/, '$1');" />

                            <label>Fecha de Vigencia</label>
                            <input type="date" class="form-control" @bind="productoNuevo.FechaVigenciaAux" />


                        </div>

                        <!-- Columna derecha -->
                        <div class="col-md-6">
                            <label>Sin Garantía</label>
                            <select class="form-control mb-2" @bind="productoNuevo.sinGara">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                            <label>Período de Gracia</label>
                            <input type="number" class="form-control mb-2" @bind="productoNuevo.PerGracia" />

                            <label>% Ampliación</label>
                            <input type="text"
                               class="form-control mb-2"
                               @bind="productoNuevo.PorcAmplia"
                               oninput="this.value = this.value .replace(/[^0-9.]/g, '') .replace(/^([^.]*\.[0-9]{2}).*$/, '$1');" />

                            <label>Aprobación Automática</label>
                            <select class="form-control mb-2" @bind="productoNuevo.AprobAuto">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                            <label>Monto Máximo</label>
                            <input type="text"
                               class="form-control mb-2"
                               @bind="productoNuevo.MontoMax"
                               oninput="this.value = this.value .replace(/[^0-9.]/g, '') .replace(/^([^.]*\.[0-9]{2}).*$/, '$1');" />

                            <label>Activo</label>
                            <select class="form-control mb-2" @bind="productoNuevo.Activo">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>
                        </div>
                    </div>




                    <br>

                    <div class="listas-container">
                        <!-- Lista 1 -->
                        <div class="lista-caja">
                            <h6 class="titulo-lista">Destinos</h6>
                            <div class="lista-scroll">
                                @foreach (var item in ListaDestinosIni)
                                {
                                    <div class="destino-item">
                                        <input type="checkbox" @bind="item.EstaSeleccionado" />
                                        <label>@item.cDescripcionDetalle</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Lista 2 -->
                        <div class="lista-caja">
                            <h6 class="titulo-lista">Finalidad</h6>
                            <div class="lista-scroll">
                                @foreach (var item in ListaFinalidadIni)
                                {
                                    <div class="destino-item">
                                        <input type="checkbox" @bind="item.EstaSeleccionado" />
                                        <label>@item.cDescripcionDetalle</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Lista 3 -->
                        <div class="lista-caja">
                            <h6 class="titulo-lista">Garantías</h6>
                            <div class="lista-scroll">
                                @foreach (var item in ListaGarantiasIni)
                                {
                                    <div class="destino-item">
                                        <input type="checkbox" @bind="item.EstaSeleccionado" />
                                        <label>@item.cDescripcionDetalle</label>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>







                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CerrarModalNuevo">Cancelar</button>
                        <button class="btn btn-success" @onclick="GuardarNuevoProducto">Guardar</button>
                    </div>

                </div>
            </div>
        </div>
    </div>
}



@if (mostrarModalEditar)
{
    <!-- Modal de Editar Producto -->
    <div class="modal show" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Producto</h5>
                    <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Columna izquierda -->
                        <div class="col-md-6">
                            <label>Denominación</label>
                            <input type="text" class="form-control mb-2" @bind="productoAEditar.Denominacion" disabled />

                            <label>Abreviatura</label>
                            <input type="text" class="form-control mb-2" @bind="productoAEditar.Abrev" disabled />

                            <label>Plazo PC</label>
                            <input type="number" class="form-control mb-2" @bind="productoAEditar.DiasPlazoPC" />

                            <label>DxP</label>
                            <select class="form-control mb-2" @bind="productoAEditar.DxP">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                            <label>Monto Mínimo</label>
                            <input type="number" class="form-control mb-2" @bind="productoAEditar.MontoMin" />

                            <label>Fecha de Vigencia</label>
                            <input type="date" class="form-control" @bind="productoAEditar.FechaVigenciaAux" />

                        </div>

                        <!-- Columna derecha -->
                        <div class="col-md-6">
                            <label>Sin Garantía</label>
                            <select class="form-control mb-2" @bind="productoAEditar.sinGara">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                            <label>Período de Gracia</label>
                            <input type="number" class="form-control mb-2" @bind="productoAEditar.PerGracia" />

                            <label>% Ampliación</label>
                            <input type="number" class="form-control mb-2" @bind="productoAEditar.PorcAmplia" />

                            <label>Aprobación Automática</label>
                            <select class="form-control mb-2" @bind="productoAEditar.AprobAuto">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                            
                            <label>Monto Máximo</label>
                            <input type="number" class="form-control mb-2" @bind="productoAEditar.MontoMax" />

                            <label>Activo</label>
                            <select class="form-control mb-2" @bind="productoAEditar.Activo">
                                <option value="1">Sí</option>
                                <option value="0">No</option>
                            </select>

                        </div>
                    </div>




                    <br>

                    <div class="listas-container">
                        <!-- Lista 1 -->
                        <div class="lista-caja">
                            <h6 class="titulo-lista">Destinos</h6>
                            <div class="lista-scroll">
                                @foreach (var item in ListaDestinosIni)
                                {
                                    <div class="destino-item">
                                        <input type="checkbox" @bind="item.EstaSeleccionado" />
                                        <label>@item.cDescripcionDetalle</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Lista 2 -->
                        <div class="lista-caja">
                            <h6 class="titulo-lista">Finalidad</h6>
                            <div class="lista-scroll">
                                @foreach (var item in ListaFinalidadIni)
                                {
                                <div class="destino-item">
                                <input type="checkbox" @bind="item.EstaSeleccionado" />
                                <label>@item.cDescripcionDetalle</label>
                                </div>
                                }
                            </div>
                        </div>

                        <!-- Lista 3 -->
                        <div class="lista-caja">
                            <h6 class="titulo-lista">Garantías</h6>
                            <div class="lista-scroll">
                                 @foreach (var item in ListaGarantiasIni)
                                {
                                <div class="destino-item">
                                <input type="checkbox" @bind="item.EstaSeleccionado" />
                                <label>@item.cDescripcionDetalle</label>
                                </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button class="btn btn-success" @onclick="GuardarEdicionProducto">Guardar</button>
                    </div>

                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalAlerta)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered" style="max-width: 302px; max-height: 151px;">
            <div class="modal-content rounded-4">
                <div class="modal-header @(esErrorAlerta ? "bg-danger" : "bg-green") text-white">
                    <h5 class="modal-title">@tituloAlerta</h5>

                    <button type="button" class="btn-close" @onclick="() => mostrarModalAlerta = false" style="border: none; background: none;"></button>
                </div>
                <div class="modal-body d-flex justify-content-center align-items-center" style="height: 100%;">
                    <p class="text-center">@mensajeAlerta</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => mostrarModalAlerta = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

<style>

    /* Ocultar*/
    .hidden-column {
        display: none;
    }


    /* Listas Destinos*/

    .listas-container {
        display: flex;
        justify-content: space-between;
        gap: 1rem;
        margin-top: 1rem;
    }

    .lista-caja {
        flex: 1;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        background-color: #f9f9f9;
        display: flex;
        flex-direction: column;
        height: 155px;
    }

    .titulo-lista {
        font-weight: 600;
        font-size: 14px;
        margin-bottom: 4px;
    }

    .lista-scroll {
        overflow-y: auto;
        height: 120px;
    }

    .destino-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 2px 4px;
        font-size: 13px;
    }

    .destino-item label {
            margin: 0;
     }


    
</style>



@code {

    APILEON api = new();

    private List<ProductosNegociosDBModel> listaProductosNegocios = new();

    private List<ProductosNegociosDBModel> productosFiltrados = new();
    private List<ProductosNegociosDBModel> productosPaginados = new();

    private int paginaActual = 1;
    private int productosPorPagina = 5;
    private int totalPaginas = 1;

    private string mensaje = "";

    private bool mostrarModalNuevo = false;
    private bool mostrarModalEditar = false;

    private ProductosNegociosDBModel productoNuevo = new();
    private ProductosNegociosDBModel productoAEditar = new();

    private bool mostrarModalAlerta = false;
    private string tituloAlerta = "";
    private string mensajeAlerta = "";
    private bool esErrorAlerta = false;

    private bool mostrarModalAsignarListas = false;
    private ProductosNegociosDBModel productoParaAsignarListas = new();
    private List<ListaDetalleModel> ListaDestinosIni = new();

    private bool esEdicion = false;

    private List<ListaDetalleModel> ListaFinalidadIni = new();
    private List<ListaDetalleModel> ListaGarantiasIni = new();

    private string busqueda = string.Empty;

    private string IdUser = "";

    protected override async Task OnInitializedAsync()
    {
        
        await ClaimsService.InitializeAsync();

        IdUser = ClaimsService.GetDatoTrabajadorByIdUser("SIdUser");

        await CargarProductosNegocios();

        FiltrarYPaginar();

    }

    private void FiltrarYPaginar()
    {
        // Filtra productos
        productosFiltrados = string.IsNullOrWhiteSpace(busqueda)
            ? listaProductosNegocios
            : listaProductosNegocios.Where(p =>
                !string.IsNullOrWhiteSpace(p.Denominacion) &&
                p.Denominacion.Contains(busqueda, StringComparison.OrdinalIgnoreCase))
              .ToList();

        // Recalcula páginas
        totalPaginas = (int)Math.Ceiling((double)productosFiltrados.Count / productosPorPagina);

        // Corrige página actual si está fuera de rango
        if (paginaActual > totalPaginas)
            paginaActual = totalPaginas;

        if (paginaActual < 1)
            paginaActual = 1;

        // Paginado
        productosPaginados = productosFiltrados
            .Skip((paginaActual - 1) * productosPorPagina)
            .Take(productosPorPagina)
            .ToList();
    }

    private void AlBuscar(ChangeEventArgs e)
    {
        busqueda = e.Value?.ToString() ?? string.Empty;
        paginaActual = 1; // Reinicia a primera página al buscar
        FiltrarYPaginar();
    }

    private void CargarPagina(int pagina)
    {
        paginaActual = pagina;
        FiltrarYPaginar();
    }


    private async Task CargarProductosNegocios()
    {
        try
        {
            var resultado = await api.APILEONGET<Respuesta<List<ProductosNegociosDBModel>>>("/api/Negocios/ProductosNegocios?tipoOperacion=1");

            if (resultado != null && resultado.Exito == 1)
            {
                listaProductosNegocios = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudieron obtener los productos ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task CargarListaDestinos()
    {
        string? id;

        try
        {
            id = esEdicion ? productoAEditar?.IdDenoCre : productoNuevo?.IdDenoCre;

            var url = $"/api/Negocios/ProductosNegocios/ListaDestinos?idDenoCre={id}";

            var resultado = await api.APILEONGET<Respuesta<List<ListaDetalleModel>>>(url);

            if (resultado != null && resultado.Exito == 1)
            {
                ListaDestinosIni = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudieron obtener los destinos ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }


    private async Task CargarListaFinalidad()
    {
        string? id;

        try
        {
            id = esEdicion ? productoAEditar?.IdDenoCre : productoNuevo?.IdDenoCre;

            var url = $"/api/Negocios/ProductosNegocios/ListaFinalidad?idDenoCre={id}";

            var resultado = await api.APILEONGET<Respuesta<List<ListaDetalleModel>>>(url);

            if (resultado != null && resultado.Exito == 1)
            {
                ListaFinalidadIni = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudo obtener finalidad ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }


    private async Task CargarListaGarantias()
    {
        string? id;

        try
        {
            id = esEdicion ? productoAEditar?.IdDenoCre : productoNuevo?.IdDenoCre;

            var url = $"/api/Negocios/ProductosNegocios/ListaGarantias?idDenoCre={id}";

            var resultado = await api.APILEONGET<Respuesta<List<ListaDetalleModel>>>(url);

            if (resultado != null && resultado.Exito == 1)
            {
                ListaGarantiasIni = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudo obtener garantías ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }




    private async Task AbrirModalNuevo()
    {
        //productoNuevo = new ProductosNegociosDBModel();

        esEdicion = false;


        productoNuevo = new ProductosNegociosDBModel
            {
                IdDenoCre = "0000",
                Denominacion = "",
                FecVig = DateTime.Now.ToString("dd/MM/yyyy"), // Establecer la fecha actual
                IdUser = IdUser,
                MontoMin = 0,
                MontoMax = 0,
                Abrev = "",
                DiasPlazoPC = 0,
                DxP = "0",
                sinGara = "0",
                PerGracia = 0,
                PorcAmplia=0,
                AprobAuto="0",
                Activo="1"
            };
        mostrarModalNuevo = true;

        await CargarListaDestinos();
        await CargarListaFinalidad();
        await CargarListaGarantias();
    }

    private void CerrarModalNuevo()
    {
        mostrarModalNuevo = false;
    }

    private void MostrarAlerta(string titulo, string mensaje)
    {
        tituloAlerta = titulo;
        mensajeAlerta = mensaje;
        mostrarModalAlerta = true;
        StateHasChanged();
    }



    private async Task GuardarDestinosSeleccionados(string idDenoCre)
    {
        var lista = ListaDestinosIni
            .Select(d => new ListaDestinos
            {
                IdLista = d.IdLista,
                IdListaDetalle = d.IdListaDetalle,
                Seleccionado = d.Seleccionado
            }).ToList();

        var request = new RegistrarDestinosRequest
        {
            IdDenoCre = idDenoCre,
            ListaDestinos = lista
        };

        try
        {
            var resultado = await api.APILEONPOST<Respuesta<string>>("/api/Negocios/ProductosNegocios/RegistrarDestinos", request);

            if (resultado != null && resultado.Exito == 1)
            {
                if (esEdicion)
                {
                    MostrarAlerta("Éxito", "Producto actualizado correctamente ✅");
                }
                else
                {
                    MostrarAlerta("Éxito", "Producto registrado correctamente ✅");
                }
            }
            else
            {
                if (esEdicion)
                {
                    MostrarAlerta("Error", $"Error al actualizar producto ❌: {resultado?.Mensaje}");
                }
                else
                {
                    MostrarAlerta("Error", $"Error al registrar producto ❌: {resultado?.Mensaje}");
                }
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "No se pudo conectar con el servidor ❌");
            Console.WriteLine(ex.Message);
        }
    }


    private async Task GuardarFinalidadSeleccionados(string idDenoCre)
    {
        var lista = ListaFinalidadIni
            .Select(d => new ListaDestinos
                {
                    IdLista = d.IdLista,
                    IdListaDetalle = d.IdListaDetalle,
                    Seleccionado = d.Seleccionado
                }).ToList();

        var request = new RegistrarDestinosRequest
            {
                IdDenoCre = idDenoCre,
                ListaDestinos = lista
            };

        try
        {
            var resultado = await api.APILEONPOST<Respuesta<string>>("/api/Negocios/ProductosNegocios/RegistrarDestinos", request);
            if (resultado != null && resultado.Exito == 1)
            {
                if (esEdicion)
                {
                    MostrarAlerta("Éxito", "Producto actualizado correctamente ✅");
                }
                else
                {
                    MostrarAlerta("Éxito", "Producto registrado correctamente ✅");
                }
            }
            else
            {
                if (esEdicion)
                {
                    MostrarAlerta("Error", $"Error al actualizar producto ❌: {resultado?.Mensaje}");
                }
                else
                {
                    MostrarAlerta("Error", $"Error al registrar producto ❌: {resultado?.Mensaje}");
                }
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "No se pudo conectar con el servidor ❌");
            Console.WriteLine(ex.Message);
        }
    }



    private async Task GuardarGarantiasSeleccionados(string idDenoCre)
    {
        var lista = ListaGarantiasIni
            .Select(d => new ListaDestinos
                {
                    IdLista = d.IdLista,
                    IdListaDetalle = d.IdListaDetalle,
                    Seleccionado = d.Seleccionado
                }).ToList();

        var request = new RegistrarDestinosRequest
            {
                IdDenoCre = idDenoCre,
                ListaDestinos = lista
            };

        try
        {
            var resultado = await api.APILEONPOST<Respuesta<string>>("/api/Negocios/ProductosNegocios/RegistrarDestinos", request);

            if (resultado != null && resultado.Exito == 1)
            {
                if (esEdicion)
                {
                    MostrarAlerta("Éxito", "Producto actualizado correctamente ✅");
                }
                else
                {
                    MostrarAlerta("Éxito", "Producto registrado correctamente ✅");
                }
            }
            else
            {
                if (esEdicion)
                {
                    MostrarAlerta("Error", $"Error al actualizar producto ❌: {resultado?.Mensaje}");
                }
                else
                {
                    MostrarAlerta("Error", $"Error al registrar producto ❌: {resultado?.Mensaje}");
                }
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "No se pudo conectar con el servidor ❌");
            Console.WriteLine(ex.Message);
        }
    }

    private async Task GuardarNuevoProducto()
    {
        try
        {
            var resultado = await api.APILEONPOST<Respuesta<ProductosNegociosDBModel>>("/api/Negocios/ProductosNegocios", productoNuevo);

            if (resultado?.Exito == 1 && resultado.Data != null)
            {
                productoNuevo.IdDenoCre = resultado.Data.IdDenoCre;

                MostrarAlerta("Éxito", $"Producto registrado correctamente ✅ (ID: {productoNuevo.IdDenoCre})");
                esErrorAlerta = false;


                await GuardarDestinosSeleccionados(productoNuevo.IdDenoCre);
                await GuardarFinalidadSeleccionados(productoNuevo.IdDenoCre);
                await GuardarGarantiasSeleccionados(productoNuevo.IdDenoCre);
            }
            else
            {
                MostrarAlerta("Error", "Error al registrar producto ❌");
                esErrorAlerta = true;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "No se pudo conectar con el servidor ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }

        mostrarModalNuevo = false;
        await CargarProductosNegocios();
        FiltrarYPaginar();
    }


    private async Task AbrirModalEditarProducto(ProductosNegociosDBModel producto)
    {
        esEdicion = true;
        
        if (producto != null)
        {
            productoAEditar = new ProductosNegociosDBModel
                {
                    IdDenoCre = producto.IdDenoCre,
                    Denominacion = producto.Denominacion,
                    FecVig = producto.FecVig,
                    IdUser = producto.IdUser,
                    MontoMin = Math.Round(producto.MontoMin, 2),
                    MontoMax = Math.Round(producto.MontoMax, 2),
                    Abrev = producto.Abrev,
                    DiasPlazoPC = producto.DiasPlazoPC,
                    DxP = producto.DxP,
                    sinGara = producto.sinGara,
                    PerGracia = producto.PerGracia,
                    PorcAmplia = Math.Round(producto.PorcAmplia, 2),
                    AprobAuto=producto.AprobAuto,
                    Activo = producto.Activo
                };
            
            if (DateTime.TryParseExact(producto.FecVig, "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out DateTime fecha))
            {
                productoAEditar.FechaVigenciaAux = fecha;
            }
            else
            {
                productoAEditar.FechaVigenciaAux = DateTime.Now;
            }

            mostrarModalEditar = true;
        }
        else
        {

            MostrarAlerta("Error", "Producto no encontrado ❌");
            esErrorAlerta = true;
        }

        await CargarListaDestinos();
        await CargarListaFinalidad();
        await CargarListaGarantias();
    }


    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
    }



    private async Task GuardarEdicionProducto()
    {
        try
        {
            var resultado = await api.APILEONPUT<Respuesta<ProductosNegociosDBModel>>("/api/Negocios/ProductosNegocios", productoAEditar);

            if (resultado != null && resultado.Exito == 1)
            {
                MostrarAlerta("Éxito", "Producto actualizado correctamente ✅");
                esErrorAlerta = false;

                await GuardarDestinosSeleccionados(productoAEditar.IdDenoCre);
                await GuardarFinalidadSeleccionados(productoAEditar.IdDenoCre);
                await GuardarGarantiasSeleccionados(productoAEditar.IdDenoCre);
            }
            else
            {
                MostrarAlerta("Error", $"Error al actualizar el producto ❌: {resultado?.Mensaje}");
                esErrorAlerta = true;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }

        mostrarModalEditar = false;
        await CargarProductosNegocios();
        FiltrarYPaginar();
    }



    private async Task EliminarProducto(ProductosNegociosDBModel producto)
    {
        try
        {

            var url = $"/api/Negocios/ProductosNegocios?IdDenoCre={producto.IdDenoCre}&idUser={producto.IdUser}";

            var resultado = await api.APILEONDEL<Respuesta<string>>(url);

            if (resultado != null && resultado.Exito == 1)
            {
                await CargarProductosNegocios();
                FiltrarYPaginar();
                MostrarAlerta("Éxito", "Producto eliminado correctamente ✅");
                esErrorAlerta = false;
            }
            else
            {
                MostrarAlerta("Error", "No se pudo eliminar el producto ❌");
                esErrorAlerta = true;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("Error", "Error al intentar eliminar el producto ❌");
            esErrorAlerta = true;
            Console.WriteLine(ex.Message);
        }
    }




    public class ProductosNegociosDBModel
    {
        public string IdDenoCre { get; set; }

        public string Denominacion { get; set; }

        public string FecVig { get; set; }

        public string IdUser { get; set; }

        public decimal MontoMin { get; set; }

        public decimal MontoMax { get; set; }

        public string Abrev { get; set; }

        public int DiasPlazoPC { get; set; }

        public string DxP { get; set; }

        public string sinGara { get; set; }

        public int PerGracia { get; set; }

        public decimal PorcAmplia { get; set; }

        public string AprobAuto { get; set; }

        public string Activo { get; set; }

        public DateTime? FechaVigenciaAux
        {
            get
            {
                // Devolver el valor de FecVig como DateTime?
                return DateTime.TryParse(FecVig, out DateTime date) ? date : (DateTime?)null;
            }
            set
            {
                // Convertir la fecha a FecVig cuando se actualiza el valor
                if (value.HasValue)
                {
                    FecVig = value.Value.ToString("dd/MM/yyyy");
                }
                else
                {
                    FecVig = null;
                }
            }
        }
    }



    public class ListaDetalleModel
    {
        public int IdListaDetalle { get; set; }
        public int IdLista { get; set; }
        public string CodDetalle { get; set; }
        public string cDescripcionDetalle { get; set; }
        public int Seleccionado { get; set; }

        public bool EstaSeleccionado
        {
            get => Seleccionado == 1;
            set => Seleccionado = value ? 1 : 0;
        }
    }

    public class RegistrarDestinosRequest
    {
        public string IdDenoCre { get; set; }
        public List<ListaDestinos> ListaDestinos { get; set; }
    }

    public class ListaDestinos
    {
        public int IdLista { get; set; }
        public int IdListaDetalle { get; set; }
        public int Seleccionado { get; set; }
    }






}
