@page "/TipoCambio"
@inject HttpClient Http

@using Models.Sistema
@using Clases.Sistema
@using Controllers.Sistema

@using System.Security.Claims
@using LeonXIIICore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClaimsService ClaimsService

<div class="row">
    <div class="col-md-12">
        <div class="portlet light portlet-fit">
            <div class="header-grupo-plantilla">
                <div class="header-content">
                    <div class="caption mb-0">
                        <i class="icon-settings"></i>
                        <span class="titulo-seccion-plantilla">
                            Configuración de Tipo de Cambio
                        </span>
                    </div>
                </div>

                <div class="header-content">
                    <div class="actions">

                    </div>
                </div>
            </div>
            <div class="blazor-content portlet-body">
                <div class="portlet-body">
                    <div class="container" style="max-width: 800px; margin: 0 auto;">
                        <div class="row">

                            <div class="col-md-12">
                                <label>Fecha:</label>
                                <input type="date" @bind="FechaSeleccionada" class="form-control" />
                            </div>
                        </div>

                        <!-- Mensaje de Estado -->
                        <p>@mensajeFecha</p>


                        <div class="row">
                            <!-- Columna 1: Tipo de Cambio -->
                            <div class="col-md-4">
                                <h4>Tipo de Cambio</h4>
                                <div>
                                    <label>Compra:</label>
                                    <input type="number" @bind="tipoCambio.Compra" class="form-control" disabled="@(permiso != 1 || !puedeEditar)" />
                                </div>
                                <div>
                                    <label>Venta:</label>
                                    <input type="number" @bind="tipoCambio.Venta" class="form-control" disabled="@(permiso != 1 || !puedeEditar)" />
                                </div>
                            </div>

                            <!-- Columna 2: Tipo de Cambio Fijo -->
                            <div class="col-md-4">
                                <h4>Tipo de Cambio Fijo</h4>
                                <div>
                                    <label>Fijo:</label>
                                    <input type="number" @bind="tipoCambio.Fijo" class="form-control" disabled="@(permiso != 2 || !puedeEditar)" />
                                </div>
                            </div>

                            <!-- Columna 3: Tipo de Cambio Sunat -->
                            <div class="col-md-4">
                                <h4>Tipo de Cambio Sunat</h4>
                                <div>
                                    <label>Compra Sunat:</label>
                                    <input type="number" @bind="tipoCambio.CompraSunat" class="form-control" disabled="@(permiso != 1 || !puedeEditar)" />
                                </div>
                                <div>
                                    <label>Venta Sunat:</label>
                                    <input type="number" @bind="tipoCambio.VentaSunat" class="form-control" disabled="@(permiso != 1 || !puedeEditar)" />
                                </div>
                            </div>
                        </div>
                        <br />

                
                        @if (mostrarBotones)
                        {
                            <div class="row mt-3 justify-content-center" style="display: flex; justify-content: center; align-items: center; height: 100%;">
                                <div class="col-12 d-flex justify-content-center">
                                    <button class="btn btn-success mx-2" @onclick="GuardarTipoCambio" disabled="@( !habilitarGrabar )">
                                        Grabar
                                    </button>
                                    <button class="btn btn-primary mx-2" @onclick="ToggleEdicion">@botonTexto</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {

    APILEON api = new();

    private int permiso = 1; 
    private bool puedeGrabar => permiso == 1 || permiso == 2;
    private bool puedeActualizar => permiso == 1 || permiso == 2;


    private DateTime _fechaSeleccionada = DateTime.Today;
    private TipoCambioModel tipoCambio = new();
    private string mensajeFecha = "";


    private bool existeRegistro = false;
    private bool puedeEditar = false; 
    private bool mostrarBotones = true; 
    private bool habilitarGrabar = false; 


    private string botonTexto = "Actualizar";

    private string IdUser = "";

    private string IdCargo = "";
    private string IdArea = "";

    private DateTime FechaSeleccionada
    {
        get => _fechaSeleccionada;
        set
        {
            _fechaSeleccionada = value;
            _ = ObtenerTipoCambio();
            VerificarFecha();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ClaimsService.InitializeAsync();

        IdUser = ClaimsService.GetDatoTrabajadorByIdUser("SIdUser");
        IdCargo = ClaimsService.GetDatoTrabajadorByIdUser("SIdCargo");
        IdArea = ClaimsService.GetDatoTrabajadorByIdUser("SIdArea");

        Permiso();
        await ObtenerTipoCambio(); 
        VerificarFecha(); 
    }

    private void Permiso()
    {
        if (IdCargo == "04" && IdArea == "09")
        {
            permiso = 1;
        }
        else if (IdCargo == "04" && IdArea == "05")
        {
            permiso = 2;
        }
        else
        {
            permiso = 0;
        }

    }


    private void VerificarFecha()
    {
        if (FechaSeleccionada.Date != DateTime.Today)
        {
            mostrarBotones = false;
            puedeEditar = false;
        }
        else
        {
            mostrarBotones = true;
            puedeEditar = false;
        }
    }

    private async Task ToggleEdicion()
    {
        if (botonTexto == "Actualizar")
        {

            puedeEditar = true;
            habilitarGrabar = true;
            botonTexto = "Cancelar";

        }
        else
        {
            await ObtenerTipoCambio();
            puedeEditar = false;
            habilitarGrabar = false;
            botonTexto = "Actualizar";
        }
        StateHasChanged();
    }


    private async Task GuardarTipoCambio()
    {
        try
        {
            string fechaFormateada = FechaSeleccionada.ToString("dd/MM/yyyy");

            var registro = new RequestTipoCambioModel
            {
                Fecha = fechaFormateada,
                Compra = tipoCambio.Compra,
                Venta = tipoCambio.Venta,
                Fijo = tipoCambio.Fijo,
                CompraSunat = tipoCambio.CompraSunat,
                VentaSunat = tipoCambio.VentaSunat,
                IdUser = IdUser,
                IdCargo = IdCargo,
                IdArea = IdArea
            };

            var resultado = await api.APILEONPOST<Respuesta<RequestTipoCambioModel>>("/api/Operaciones/TipoCambio", registro);

            if (resultado != null && resultado.Exito == 1)
            {
                mensajeFecha = existeRegistro ? "Registro actualizado correctamente ✅" : "Nuevo tipo de cambio guardado ✅";
                existeRegistro = true;

                puedeEditar = false;
                habilitarGrabar = false;
                botonTexto = "Actualizar";

                await ObtenerTipoCambio();
            }
            else
            {
                mensajeFecha = $"Error al guardar los datos ❌: {resultado?.Mensaje}";
            }
        }
        catch (Exception ex)
        {
            mensajeFecha = $"Error de conexión ❌ {ex.Message}";
        }

        StateHasChanged();
    }


    private async Task ObtenerTipoCambio()
    {
        try
        {
            string fechaFormateada = _fechaSeleccionada.ToString("dd/MM/yyyy");

            var resultado = await api.APILEONGET<Respuesta<List<TipoCambioModel>>>("/api/Operaciones/TipoCambio?fecha=" + fechaFormateada);

            if (resultado != null && resultado.Exito == 1 && resultado.Data != null && resultado.Data.Count > 0)
            {
                tipoCambio = resultado.Data[0];
                mensajeFecha = "Datos cargados correctamente ✅";
            }
            else
            {
                mensajeFecha = "No se encontraron datos ❌";
                tipoCambio = new TipoCambioModel(); 
            }
        }
        catch (Exception ex)
        {
            mensajeFecha = $"Error de conexión a ❌ {ex.Message}";
            tipoCambio = new TipoCambioModel(); 
        }

        StateHasChanged();
    }




    public class TipoCambioModel
    {
        public decimal Compra { get; set; }
        public decimal Venta { get; set; }
        public decimal Fijo { get; set; }
        public decimal CompraSunat { get; set; }
        public decimal VentaSunat { get; set; }
    }

    public class RequestTipoCambioModel
    {
        public string Fecha { get; set; }
        public decimal Compra { get; set; }
        public decimal Venta { get; set; }
        public decimal Fijo { get; set; }
        public decimal CompraSunat { get; set; }
        public decimal VentaSunat { get; set; }
        public string IdUser { get; set; }
        public string IdCargo { get; set; }
        public string IdArea { get; set; }
    }


}
