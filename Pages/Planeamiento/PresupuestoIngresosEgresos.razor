@page "/PresupuestoIngresosEgresos"
@inject HttpClient Http

@using System.Linq

@using Models.Sistema
@using Clases.Sistema
@using Controllers.Sistema
@using Microsoft.AspNetCore.Components


@using System.Security.Claims
@using LeonXIIICore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClaimsService ClaimsService


<div class="row">
    <div class="col-md-12">
        <div class="portlet light portlet-fit">

            <div class="header-grupo-plantilla">
                <div class="caption mb-0">
                    <i class="icon-settings"></i>
                    <span class="titulo-seccion-plantilla">CONFIGURACIÓN DE PRESUPUESTOS</span>
                </div>

                <div class="actions">
                </div>
            </div>

            <div class="blazor-content portlet-body">
                <div class="mb-3" style="display: flex; align-items: center; padding: 15px;">

                    <input type="text" class="form-control search-input mr-2" placeholder="Buscar Concepto..." @bind="textoBusqueda" @oninput="AlBuscar" style="flex-grow: 1; width: 300px;" />
                
                    <label for="tipoSeleccionado" class="mr-2" style="margin-left:20px; margin-top: 20px;">Tipo:</label>
                    <select class="form-control combo-select mr-2" id="tipoSeleccionado" @onchange="HandleTipoChange" style="width: 150px;">
                        <option value="0001" selected="@("0001" == tipoSeleccionado)">INGRESOS</option>
                        <option value="0000" selected="@("0000" == tipoSeleccionado)">EGRESOS</option>
                    </select>


                    <label for="anioSeleccionado" class="mr-2" style="margin-left:20px; margin-top: 20px;">Año:</label>
                    <select class="form-control combo-select mr-2" id="anioSeleccionado" @onchange="HandleYearChange" style="width: 100px;">
                        @for (int anio = 2007; anio <= 2050; anio++)
                        {
                            <option value="@anio" selected="@(anio == anioSeleccionado)">@anio</option>
                        }
                    </select>

                    <label for="agenciaSeleccionada" class="mr-2" style="margin-left: 20px; margin-top: 20px;">Agencia:</label>
                    <select class="form-control combo-select mr-2" id="agenciaSeleccionada"
                            value="@IdAgencia" @onchange="OnAgenciaChanged" style="width: 250px;">
                        @if (listaAgencias != null)
                        {
                            @foreach (var agencia in listaAgencias)
                            {
                                <option value="@agencia.IdAgencia">@agencia.Agencia</option>
                            }
                        }
                    </select>


                    <label for="areaSeleccionada" class="mr-2" style="margin-left: 20px; margin-top: 20px;">Área:</label>
                    <select class="form-control combo-select" id="areaSeleccionada"
                            value="@IdArea" @onchange="OnAreaChanged" style="width: 350px;">
                        @if (listaAreas != null)
                        {
                            @foreach (var area in listaAreas)
                            {
                                <option value="@area.IdArea">@area.Area</option>
                            }
                        }
                    </select>


                    <label style="min-width: 170px; white-space: nowrap; margin-left: 20px; margin-top: 20px;">
                        Fecha Máxima Registro:
                    </label>

                    <input type="text" class="form-control search-input mr-2" style="width: 110px;" value="@fechaMaximaRegistro.ToString("dd/MM/yyyy")" disabled />

                    @if (IdCargoIni == "03" && IdAreaIni == "28")
                    {
                        <button style="margin-top: 15px;border: 0;background-color: white;" @onclick="AbrirModalFecha">
                            <i class="fa fa-edit"></i>
                        </button>
                    }


                </div>

                <div class="tabla-scroll">
                    <table class="table table-bordered table-sm tabla-centro" style="text-transform: uppercase;">
                        <thead>
                            <tr>
                                <th>CtaContable</th>
                                <th>CtaNombre</th>
                                @foreach (var mes in Meses)
                                {
                                    <th>@mes</th>
                                }
                                <th>Total</th>
                            </tr>
                        </thead>
                        <tbody>


                            @foreach (var cuenta in Cuentas)
                            {
                                bool editableJerarquia = EsEditablePorJerarquia(cuenta);
                                bool editableFinal = EsEditable(cuenta);
                                bool estaOculta = CuentasColapsadas.Any(colapsada =>
                                cuenta.CtaContable.StartsWith(colapsada) &&
                                cuenta.CtaContable != colapsada);

                                if (estaOculta)
                                {
                                    continue;
                                }

                                <tr>
                                    <td style="@(editableJerarquia ? "text-transform: uppercase;" : "font-weight: bold; text-transform: uppercase;")">
                                        @if (!editableJerarquia)
                                        {
                                            <button class="btn btn-link btn-sm p-0 m-0" @onclick="@(() => ToggleColapso(cuenta.CtaContable))">
                                                @(CuentasColapsadas.Contains(cuenta.CtaContable) ? "+" : "-")
                                            </button>
                                            @cuenta.CtaContable
                                        }
                                        else
                                        {
                                            @cuenta.CtaContable
                                        }
                                    </td>

                                    <td style="@(editableJerarquia ? "text-transform: uppercase;" : "font-weight: bold; text-transform: uppercase;")">
                                        @cuenta.CtaNombre
                                    </td>

                                    @for (int i = 0; i < 12; i++)
                                    {
                                        var mesIndex = i;
                                        <td>
                                            <input type="number"
                                           class="form-control form-control-sm"
                                           value="@cuenta.GetMes(i)"
                                           @onchange="(e) => OnMontoEditado(cuenta, mesIndex, e.Value?.ToString())"
                                           disabled="@(!editableFinal)"
                                           title="@(editableFinal ? "" : "No editable")" />
                                        </td>
                                    }

                                    <td>@cuenta.TotalPresupuesto.ToString("N2")</td>
                                </tr>
                            }


                        </tbody>
                    </table>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Cerrar" disabled="@(!CuentasOriginal.Any())">Cancelar</button>
                    <button class="btn btn-danger" @onclick="BorrarPresupuesto" disabled="@(!CuentasOriginal.Any())">Borrar</button>
                    <button class="btn btn-success" @onclick="GuardarPresupuesto" disabled="@(!CuentasOriginal.Any())">Guardar</button>
                </div>
            </div>
        </div>


    </div>
</div>


@if (mostrarModalAlerta)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered" style="max-width: 302px; max-height: 151px;">
            <div class="modal-content rounded-4">
                <div class="modal-header @(esErrorAlerta ? "bg-danger" : "bg-green") text-white">
                    <h5 class="modal-title">@tituloAlerta</h5>

                    <button type="button" class="btn-close" @onclick="() => mostrarModalAlerta = false" style="border: none; background: none;"></button>
                </div>
                <div class="modal-body d-flex justify-content-center align-items-center" style="height: 100%;">
                    <p class="text-center">@mensajeAlerta</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => mostrarModalAlerta = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}


@if (mostrarModalFecha)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5); z-index: 1070;">
        <div class="modal-dialog">
            <div class="modal-content" style="margin-top: 200px;margin-left: 100px; width: 300px;">
                <div class="modal-header">
                    <h5 class="modal-title">Seleccionar Fecha</h5>
                </div>
                <div class="modal-body">
                    <input type="date" @bind="nuevaFecha" class="form-control" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelarEdicionFecha">Cancelar</button>
                    <button class="btn btn-primary" @onclick="GuardarFecha">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}




<style>


    /* Ocultar*/
    .hidden-column {
        display: none;
    }

    .form-container {
        width: 250px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .form-container label {
            align-self: start;
            margin-bottom: 4px;
            font-weight: 500;
    }

    .form-container .form-control {
            width: 100%;
            margin-bottom: 12px;
    }

    .tabla-centro th, .tabla-centro td {
        text-align: center;
    }

    /* Estilos para combos */
    .combo-select {
        width: 50px;
        font-size: 16px;
        border-radius: 25px;
        border: 1px solid #ddd;
        background-color: #f9f9f9;
        transition: all 0.3s ease;
        outline: none;
        margin-left: 15px;
        margin-top: 15px;
    }

    .combo-select:focus {
            border-color: #6dc322;
            background-color: #ffffff;
            box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);
    }

    .combo-select:hover {
            border-color: #6dc322;
            background-color: #f0f0f0;
    }

    .tabla-scroll {
        width: 100%;
        max-height: 700px;
        /*overflow-x: auto;*/
        overflow-y: auto;
    }

    .scroll-horizontal-total {
        width: 100%;
        overflow-x: auto;
    }

</style>



@code {

    APILEON api = new();

    private List<PresupuestosDBModel> CuentasOriginal = new();
    private List<PresupuestosDBModel> Cuentas = new(); 
    private string textoBusqueda = string.Empty;


    private List<AgenciasModel> listaAgencias = new(); 
    private List<AreasModel> listaAreas = new();


    private HashSet<string> CuentasColapsadas = new();


    private CreatePresupuestosIngresosEgresosDBModel presupuestoNuevo = new();
    private CreatePresupuestosIngresosEgresosDBModel presupuestoAEditar = new();


    private UpdatePresupuestosIngresosEgresosDBModel presupuestoBorrar = new();

    private string mensaje = "";
    private bool mostrarModalAlerta = false;
    private string tituloAlerta = "";
    private string mensajeAlerta = "";
    private bool esErrorAlerta = false;

    private string monedaSeleccionada = "0";

    private bool mostrarModalFecha = false;

    private DateTime fechaMaximaRegistro = DateTime.Today;
    private DateTime nuevaFecha;

    private int anioSeleccionado = DateTime.Now.Year;



    string tipoSeleccionado = "0000"; 

    private string IdUser = "";
    private string IdAgencia = "01";
    private string IdCargo = "";
    private string IdArea = "";

    private string IdCargoIni = "";
    private string IdAreaIni = "";


    private string IdRec;

    private void EstablecerIdRec()
    {
        if (IdCargo == "04" && IdArea == "30")
        {
            IdRec = "1";
        }
        else
        {
            IdRec = "0";
        }
    }


    private readonly string[] Meses = new[]
    {
        "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
        "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
    };


    protected override async Task OnInitializedAsync()
    {
        await ClaimsService.InitializeAsync();

        IdUser = ClaimsService.GetDatoTrabajadorByIdUser("SIdUser");
        //IdAgencia = ClaimsService.GetDatoTrabajadorByIdUser("SIdAgencia");
        IdCargo = ClaimsService.GetDatoTrabajadorByIdUser("SIdCargo");
        IdArea = ClaimsService.GetDatoTrabajadorByIdUser("SIdArea");

        IdCargoIni = IdCargo;
        IdAreaIni = IdArea;

        EstablecerIdRec();
        await ObtenerComboAgencias();
        await ObtenerComboAreas();
        await ObtenerFechaCierre();



    }


    private void AbrirModalFecha()
    {
        nuevaFecha = fechaMaximaRegistro;
        mostrarModalFecha = true;
    }

    private void CerrarModalFecha()
    {
        mostrarModalFecha = false;
    }

    private void CancelarEdicionFecha()
    {
        mostrarModalFecha = false;
    }

    private async void GuardarFecha()
    {
        fechaMaximaRegistro = nuevaFecha;
        await RegistrarFechaCierre();
        mostrarModalFecha = false;
    }

    private async Task OnAgenciaChanged(ChangeEventArgs e)
    {
        IdAgencia = e.Value?.ToString();
        await ObtenerFechaCierre();

    }


    private async Task OnAreaChanged(ChangeEventArgs e)
    {
        IdArea = e.Value?.ToString();
        await ObtenerFechaCierre();

    }

    private async Task HandleTipoChange(ChangeEventArgs e)
    {
        tipoSeleccionado = e.Value?.ToString();
        await ObtenerFechaCierre();
    }


    private async Task HandleYearChange(ChangeEventArgs e)
    {

        anioSeleccionado = int.Parse(e.Value.ToString());
        await ObtenerFechaCierre();

    }

    private async Task MonedaChange(ChangeEventArgs e)
    {
        monedaSeleccionada = e.Value.ToString();
        await ObtenerFechaCierre();
 
    }

    private void AlBuscar(ChangeEventArgs e)
    {
        textoBusqueda = e.Value?.ToString()?.ToLower() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(textoBusqueda))
        {
            // Si se borra el texto, mostrar todo
            Cuentas = new List<PresupuestosDBModel>(CuentasOriginal);
        }
        else
        {
            // Filtra por nombre (asegúrate de que CtaNombre no sea null)
            Cuentas = CuentasOriginal
                .Where(c => !string.IsNullOrWhiteSpace(c.CtaNombre) &&
                            c.CtaNombre.ToLower().Contains(textoBusqueda))
                .ToList();
        }
    }



    private async Task ObtenerFechaCierre()
    {
        try
        {
            var request = new PresupuestosFechaCierreModel
                {
                    Año = anioSeleccionado.ToString(),
                    IdUser = "",
                    Fecha = ""
                };

            var resultado = await api.APILEONPOST<Respuesta<List<PresupuestosFechaCierreModel>>>("/api/Planeamiento/PresupuestosInversiones/ObtenerFechaCierre", request);

            if (resultado != null && resultado.Exito == 1 && resultado.Data.Any())
            {
                var fechaStr = resultado.Data.First().Fecha;

                if (!string.IsNullOrWhiteSpace(fechaStr))
                {
                    try
                    {
                        fechaMaximaRegistro = Convert.ToDateTime(fechaStr);
                        esErrorAlerta = false;
                    }
                    catch
                    {
                        esErrorAlerta = true;
                        MostrarAlerta("Error", "La fecha obtenida no tiene un formato válido.");

                    }
                }

            }
            else
            {
                fechaMaximaRegistro = new DateTime(1999, 1, 1);
                esErrorAlerta = true;
                MostrarAlerta("Advertencia", "No se registró fecha cierre de presupuesto, comunicarse con el área de planeamiento.");

            }
        }
        catch (Exception ex)
        {
            esErrorAlerta = true;
            MostrarAlerta("Error", "Error de conexión con el servidor.");

            Console.WriteLine(ex.Message);
        }

        await CargarPresupuestos();
    }

    private async Task RegistrarFechaCierre()
    {
        try
        {
            var request = new PresupuestosFechaCierreModel
                {
                    Año = anioSeleccionado.ToString(),
                    IdUser = IdUser,
                    Fecha = nuevaFecha.ToString("dd/MM/yyyy")
                };

            var resultado = await api.APILEONPOST<Respuesta<List<PresupuestosFechaCierreModel>>>("/api/Planeamiento/PresupuestosInversiones/RegistrarFechaCierre", request);

            if (resultado != null && resultado.Exito == 1)
            {
                try
                {
                    fechaMaximaRegistro = nuevaFecha;
                    mostrarModalFecha = false;
                    esErrorAlerta = false;
                    MostrarAlerta("Éxito", "Fecha cierre registrada correctamente.");

                }
                catch
                {
                    esErrorAlerta = true;
                    MostrarAlerta("Error", "La fecha obtenida no tiene un formato válido.");

                }
            }
            else
            {
                esErrorAlerta = true;
                MostrarAlerta("Advertencia", "No se pudo registrar fecha cierre de presupuesto.");

            }
        }
        catch (Exception ex)
        {
            esErrorAlerta = true;
            MostrarAlerta("Error", "Error de conexión con el servidor.");
            Console.WriteLine(ex.Message);
        }
    }

    private async Task CargarPresupuestos()
    {
        string año = anioSeleccionado.ToString();
        string idagencia = IdAgencia;
        string tipo = tipoSeleccionado;
        string idArea = IdArea;
        string idrec = IdRec;

        string endpoint = $"/api/Planeamiento/PresupuestosIngresosEgresos/?Año={año}&IdAgencia={idagencia}&Tipo={tipo}&IdArea={idArea}&IdRec={idrec}";

        var response = await api.APILEONGET<Respuesta<List<PresupuestosDBModel>>>(endpoint);

        if (response != null && response.Exito == 1 && response.Data != null)
        {
            CuentasOriginal = response.Data.Select(c => new PresupuestosDBModel
            {
                CtaContable = c.CtaContable,
                CtaNombre = c.CtaNombre,
                Enero = c.Enero,
                Febrero = c.Febrero,
                Marzo = c.Marzo,
                Abril = c.Abril,
                Mayo = c.Mayo,
                Junio = c.Junio,
                Julio = c.Julio,
                Agosto = c.Agosto,
                Septiembre = c.Septiembre,
                Octubre = c.Octubre,
                Noviembre = c.Noviembre,
                Diciembre = c.Diciembre,
                TotalPresupuesto = c.TotalPresupuesto
            }).ToList();


            Cuentas = new List<PresupuestosDBModel>(CuentasOriginal);

            // Colapsar todas las cuentas padre al inicio
            //CuentasColapsadas = new HashSet<string>(
            //    CuentasOriginal
            //        .Where(c => !EsEditablePorJerarquia(c))
            //        .Select(c => c.CtaContable)
    //);

        }
        else
        {
            CuentasOriginal = new(); // También limpia la fuente base
            Cuentas = new();         // Limpia la vista filtrada
        }
    }


    private async Task ObtenerComboAgencias()
    {
        try
        {
            var request = new RequestFiltroCombos
                {
                    IdCargo = IdCargo,
                    IdArea = IdArea,
                    IdAgencia = IdAgencia
                };

            var resultado = await api.APILEONPOST<Respuesta<List<AgenciasModel>>>("/api/Planeamiento/PresupuestosInversiones/ObtenerComboAgencias", request);

            if (resultado != null && resultado.Exito == 1)
            {
                listaAgencias = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudieron obtener las agencias ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task ObtenerComboAreas()
    {
        try
        {
            var request = new RequestFiltroCombos
                {
                    IdCargo = IdCargo,
                    IdArea = IdArea,
                    IdAgencia = IdAgencia
                };

            var resultado = await api.APILEONPOST<Respuesta<List<AreasModel>>>("/api/Planeamiento/PresupuestosInversiones/ObtenerComboAreas", request);

            if (resultado != null && resultado.Exito == 1)
            {
                listaAreas = resultado.Data;
                mensaje = resultado.Mensaje;
            }
            else
            {
                mensaje = "No se pudieron obtener las agencias ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }

    public class requestPresupuestosModel
    {
        public string Año { get; set; }

        public string IdAgencia { get; set; }

        public string Tipo { get; set; }

        public string IdArea { get; set; }

        public string IdRec { get; set; }
    }

    public class PresupuestosDBModel
    {
        public string CtaContable { get; set; }
        public string CtaNombre { get; set; }

        public decimal Enero { get; set; }
        public decimal Febrero { get; set; }
        public decimal Marzo { get; set; }
        public decimal Abril { get; set; }
        public decimal Mayo { get; set; }
        public decimal Junio { get; set; }
        public decimal Julio { get; set; }
        public decimal Agosto { get; set; }
        public decimal Septiembre { get; set; }
        public decimal Octubre { get; set; }
        public decimal Noviembre { get; set; }
        public decimal Diciembre { get; set; }

        public decimal TotalPresupuesto { get; set; }

        public void CalcularTotal()
        {
            TotalPresupuesto = Enero + Febrero + Marzo + Abril + Mayo + Junio +
                               Julio + Agosto + Septiembre + Octubre + Noviembre + Diciembre;
        }


        public void SetMes(int index, decimal valor)
        {
            switch (index)
            {
                case 0: Enero = valor; break;
                case 1: Febrero = valor; break;
                case 2: Marzo = valor; break;
                case 3: Abril = valor; break;
                case 4: Mayo = valor; break;
                case 5: Junio = valor; break;
                case 6: Julio = valor; break;
                case 7: Agosto = valor; break;
                case 8: Septiembre = valor; break;
                case 9: Octubre = valor; break;
                case 10: Noviembre = valor; break;
                case 11: Diciembre = valor; break;
            }
        }

        public decimal GetMes(int index)
        {
            return index switch
            {
                0 => Enero,
                1 => Febrero,
                2 => Marzo,
                3 => Abril,
                4 => Mayo,
                5 => Junio,
                6 => Julio,
                7 => Agosto,
                8 => Septiembre,
                9 => Octubre,
                10 => Noviembre,
                11 => Diciembre,
                _ => 0
            };
        }


    }

 
    private void ActualizarPadres(PresupuestosDBModel cuentaHija, int mesIndex)
    {
        var padres = CuentasOriginal
            .Where(c => cuentaHija.CtaContable.StartsWith(c.CtaContable) && c.CtaContable != cuentaHija.CtaContable)
            .OrderByDescending(c => c.CtaContable.Length)
            .ToList();

        foreach (var padre in padres)
        {
            var hijosDirectos = CuentasOriginal
                .Where(c =>
                    c.CtaContable.StartsWith(padre.CtaContable) &&
                    c.CtaContable.Length == padre.CtaContable.Length + 2);

            decimal sumaMes = hijosDirectos.Sum(h => h.GetMes(mesIndex));

            padre.SetMes(mesIndex, sumaMes);
            padre.CalcularTotal();
        }
    }


    private void OnMontoEditado(PresupuestosDBModel cuenta, int mesIndex, string nuevoValorString)
    {
        if (decimal.TryParse(nuevoValorString, out decimal nuevoValor))
        {
            // Buscar en CuentasOriginal
            var cuentaOriginal = CuentasOriginal.FirstOrDefault(c => c.CtaContable == cuenta.CtaContable);
            if (cuentaOriginal != null)
            {
                cuentaOriginal.SetMes(mesIndex, nuevoValor);
                cuentaOriginal.CalcularTotal();
                ActualizarPadres(cuentaOriginal, mesIndex); // 👈 siempre sobre lista completa
            }

            // Reflejar también en la vista filtrada
            var cuentaVisible = Cuentas.FirstOrDefault(c => c.CtaContable == cuenta.CtaContable);
            if (cuentaVisible != null)
            {
                cuentaVisible.SetMes(mesIndex, nuevoValor);
                cuentaVisible.CalcularTotal();
            }
        }
    }


    private bool EsEditablePorJerarquia(PresupuestosDBModel cuenta)
    {
        return !CuentasOriginal.Any(c =>
            c.CtaContable.StartsWith(cuenta.CtaContable) &&
            c.CtaContable.Length == cuenta.CtaContable.Length + 2);
    }

    private bool EsEditablePorIdRec(PresupuestosDBModel cuenta)
    {
        if (IdRec == "1")
            return cuenta.CtaContable.StartsWith("4501");
        else 
            //return !cuenta.CtaContable.StartsWith("4501");
            return true;
    }

    private bool EsEditable(PresupuestosDBModel cuenta)
    {
        return EsEditablePorJerarquia(cuenta) && EsEditablePorIdRec(cuenta);
    }


    private void ToggleColapso(string ctaContable)
    {
        if (CuentasColapsadas.Contains(ctaContable))
        {
            CuentasColapsadas.Remove(ctaContable); // Expandir (mostrar hijas)
        }
        else
        {
            CuentasColapsadas.Add(ctaContable); // Colapsar (ocultar hijas)
        }
    }

    private async Task Cerrar()
    {
        await ObtenerFechaCierre();
    }


    private async Task GuardarPresupuesto()
    {
        bool huboError = false;

        foreach (var cuenta in CuentasOriginal)
        {
            var presupuestoNuevo = new CreatePresupuestosIngresosEgresosDBModel
                {
                    IdAgencia = IdAgencia,
                    IdArea = IdArea,
                    Tipo = tipoSeleccionado,
                    Año = anioSeleccionado.ToString(),
                    CtaContable = cuenta.CtaContable,
                    CtaNombre = cuenta.CtaNombre,
                    Enero = cuenta.Enero,
                    Febrero = cuenta.Febrero,
                    Marzo = cuenta.Marzo,
                    Abril = cuenta.Abril,
                    Mayo = cuenta.Mayo,
                    Junio = cuenta.Junio,
                    Julio = cuenta.Julio,
                    Agosto = cuenta.Agosto,
                    Septiembre = cuenta.Septiembre,
                    Octubre = cuenta.Octubre,
                    Noviembre = cuenta.Noviembre,
                    Diciembre = cuenta.Diciembre,
                    IdUser = IdUser
                };

            string endpoint = "/api/Planeamiento/PresupuestosIngresosEgresos/RegistrarPresupuesto";

            try
            {
                var response = await api.APILEONPOST<Respuesta<CreatePresupuestosIngresosEgresosDBModel>>(endpoint, presupuestoNuevo);

                if (response == null || response.Exito != 1)
                {
                    huboError = true;
                    esErrorAlerta = true;
                    MostrarAlerta("Error", "No se puede Registrar Presupuesto ❌");
                    break;
                }
            }
            catch (Exception ex)
            {
                huboError = true;
                esErrorAlerta = true;
                MostrarAlerta("Error", "No se puede Registrar Presupuesto ❌");
                break;
            }
        }

        if (!huboError)
        {
            esErrorAlerta = false;
            MostrarAlerta("Éxito", "Presupuesto registrado correctamente ✅");
        }

        textoBusqueda = string.Empty;
        await CargarPresupuestos();
    }



    private async Task BorrarPresupuesto()
    {
        try
        {
            var presupuestoborrar = new UpdatePresupuestosIngresosEgresosDBModel
            {
                    IdAgencia = IdAgencia,
                    IdArea = IdArea,
                    Año = anioSeleccionado.ToString(),
                    Tipo = tipoSeleccionado,
                    IdUser = IdUser
            };

            var api = new APILEON();

            var response = await api.APILEONPUT<Respuesta<string>>("/api/Planeamiento/PresupuestosIngresosEgresos/DeletePresupuesto", presupuestoborrar);

            if (response.Exito == 1)
            {
                esErrorAlerta = false;
                MostrarAlerta("Éxito", "Presupuesto eliminado correctamente ✅");
                
            }
            else
            {
                esErrorAlerta = true;
                MostrarAlerta("Error", "Error al eliminar Presupuesto ❌");
                
            }
        }
        catch (Exception ex)
        {
            
            MostrarAlerta("Error de conexión", "Error de conexión ❌");
            esErrorAlerta = true;
            
            Console.WriteLine(ex.Message);
        }

        await CargarPresupuestos();

    }



    private void MostrarAlerta(string titulo, string mensaje)
    {
        tituloAlerta = titulo;
        mensajeAlerta = mensaje;
        mostrarModalAlerta = true;
        StateHasChanged();
    }




    public class CreatePresupuestosIngresosEgresosDBModel
    {
        public string IdAgencia { get; set; }
        public string IdArea { get; set; }
        public string Tipo { get; set; }
        public string Año { get; set; }

        public string CtaContable { get; set; }
        public string CtaNombre { get; set; }

        public decimal Enero { get; set; }
        public decimal Febrero { get; set; }
        public decimal Marzo { get; set; }
        public decimal Abril { get; set; }
        public decimal Mayo { get; set; }
        public decimal Junio { get; set; }
        public decimal Julio { get; set; }
        public decimal Agosto { get; set; }
        public decimal Septiembre { get; set; }
        public decimal Octubre { get; set; }
        public decimal Noviembre { get; set; }
        public decimal Diciembre { get; set; }

        public string IdUser { get; set; }

    }

    public class UpdatePresupuestosIngresosEgresosDBModel
    {

        public string IdAgencia { get; set; }

        public string IdArea { get; set; }

        public string Año { get; set; }

        public string Tipo { get; set; }

        public string IdUser { get; set; }

    }

    public class PresupuestosFechaCierreModel
    {
        public string Año { get; set; }

        public string IdUser { get; set; }

        public string Fecha { get; set; }

    }

        public class AgenciasModel
    {
        public string IdAgencia { get; set; }
        public string Agencia { get; set; }

    }

    public class AreasModel
    {
        public string IdArea { get; set; }
        public string Area { get; set; }
        public string IdAgencia { get; set; }

    }

    public class RequestFiltroCombos
    {
        public string? IdCargo { get; set; }
        public string? IdArea { get; set; }
        public string? IdAgencia { get; set; }
    }


}
