@using Models.Sistema
@using Clases.Sistema
@using Controllers.Sistema
@page "/Horario"

<style>
     .spinner-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh; /* Centra el spinner en la pantalla */
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }

</style>

@*SPINNER*@
@if (cargando)
{
    <div class="spinner-container">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
        <img src="../assets/global/img/loading.gif" alt="loading"><p>Cargando datos, por favor espere...</p>
    </div>
   


}
else
{
    <div class="row">
        <div class="col-md-12">
            <!-- BEGIN EXAMPLE TABLE PORTLET-->
            <div class="portlet light portlet-fit ">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="icon-settings font-red"></i>
                        <span class="caption-subject font-red sbold uppercase">CONFIGURACION DE HORARIO</span>
                    </div>

                </div>
                <div class="portlet-body">
                    <div class="table-toolbar">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="btn-group">
                                    <button @onclick="() => AbrirModalAgregar()" id="sample_editable_1_new" class="btn green">
                                        Agregar
                                        <i class="fa fa-plus"></i>
                                    </button>
                                </div>
                            </div>

                        </div>
                    </div>
                    @if (horario == null)
                    {
                        <p>Cargando horarios...</p>
                    }
                    else
                    {
                        <table class="table table-striped table-hover table-bordered" id="sample_editable_1">
                            <thead>
                                <tr>
                                    <th> CODIGO HORARIO </th>
                                    <th> NOMBRE HORARIO </th>
                                    <th> DESCRIPCION HORARIO</th>
                                    <th> ESTADO</th>
                                    <th> ACCIONES</th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var horario in horario)

                                {

                                    <tr>
                                        <td>@horario.CodHorario</td>
                                        <td>@horario.cNombreHorario</td>
                                        <td>@horario.cDescripcionHorario</td>
                                        <td class="center">
                                            @if (@horario.bActivo == "ACTIVO")
                                            {
                                                <span class="label label-sm label-success"> @horario.bActivo </span>
                                            }
                                            else
                                            {
                                                <span class="label label-sm label-danger"> @horario.bActivo </span>
                                            }

                                        </td>
                                        <td class="center">
                                            <button @onclick="() => AbrirModalEditar(horario)" class="btn btn-outline btn-circle btn-sm blue">
                                                <i class="fa fa-edit"></i> Editar
                                            </button>
                                            @if (@horario.bActivo == "ACTIVO")
                                            {
                                                <button @onclick="() => AbrirModal(horario)" class="btn btn-outline btn-circle dark btn-sm red">
                                                    <i class="fa fa-trash-o"></i> Desactivar
                                                </button>
                                            }
                                            else
                                            {
                                                <button @onclick="() => AbrirModalActivar(horario)" class="btn btn-outline btn-circle dark btn-sm green-jungle">
                                                    <i class="fa fa-trash-o"></i> Activar
                                                </button>
                                            }
                                        </td>



                                    </tr>
                                }

                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
}


@*MODAL PARA PODER MOSTRAR MENSAJE DE DESACTIVACIÓN*@
@if (mostrarModal)
{
    <div class="modal fade in" id="basic" tabindex="-1" role="basic" aria-hidden="true" style="display: block; padding-right: 15px;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button @onclick="CerrarModal" type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                    <h4 class="modal-title">Confirmación</h4>
                </div>
                <div class="modal-body"> ¿Estás seguro de que deseas desactivar el horario <b>@codigoHorarioAEliminar</b> - <b> @cNombreHorario </b>? </div>
                <div class="modal-footer">
                    <button @onclick="ConfirmarDesactivar" type="button" class="btn btn-outline btn-circle btn-sm blue" data-dismiss="modal">Sí, Desactivar</button>
                    <button @onclick="CerrarModal" type="button" class="btn btn-outline btn-circle dark btn-sm red" data-dismiss="modal">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}

@*MODAL PARA PODER MOSTRAR MENSAJE DE ACTIVACIÓN*@
@if (mostrarModalActivar)
{
    <div class="modal fade in" id="basic" tabindex="-1" role="basic" aria-hidden="true" style="display: block; padding-right: 15px;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button @onclick="CerrarModalActivar" type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                    <h4 class="modal-title">Confirmación</h4>
                </div>
                <div class="modal-body"> ¿Estás seguro de que deseas Activar el horario <b>@codigoHorarioAActivar</b> - <b> @cNombreHorario </b>? </div>
                <div class="modal-footer">
                    <button @onclick="ConfirmarActivar" type="button" class="btn btn-outline btn-circle btn-sm blue" data-dismiss="modal">Sí, Activar</button>
                    <button @onclick="CerrarModalActivar" type="button" class="btn btn-outline btn-circle dark btn-sm red" data-dismiss="modal">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}

@*MODAL PARA PODER EDITAR LOS HORARIOS*@
@if (mostrarModalEditar)
{
    <div class="modal fade in" id="basic" tabindex="-1" role="basic" aria-hidden="true" style="display: block; padding-right: 15px;">
        <div class="modal-dialog" style=" position: fixed; top: 50%;    left: 50%; transform: translate(-50%, -50%);    width: 50%; max-width: 500px; background: white; padding: 20px;">
            <div class="modal-content">
                <div class="modal-header">
                    <button @onclick="CerrarModalEditar" type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                    <h4 class="modal-title">Editar Horario - @HorarioTemporal.CodHorario</h4>
                </div>
                <div class="modal-body">
                    
                    <label>Código de Horario:</label>
                    <input @bind="HorarioTemporal.CodHorario" class="form-control" readonly />

                    <label>Nombre:</label>
                    <input @bind="HorarioTemporal.cNombreHorario" class="form-control" />

                    <label>Descripción:</label>
                    <input @bind="HorarioTemporal.cDescripcionHorario" class="form-control" />

                    <label>Activo:</label>
                    <select @bind="HorarioTemporal.bActivo" class="form-control">
                        <option value="ACTIVO">ACTIVO</option>
                        <option value="INACTIVO">INACTIVO</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button @onclick="ConfirmarEditar" type="button" class="btn btn-outline btn-circle btn-sm blue" data-dismiss="modal">Actualizar</button>
                    <button @onclick="CerrarModalEditar" type="button" class="btn btn-outline btn-circle dark btn-sm red" data-dismiss="modal">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}

@*MODAL PARA PODER LLENAR LOS DATOS PARA UN NUEVO HORARIO*@
@if (mostrarModalAgregar)
{
    <div class="modal fade in" id="modalNuevoHorario" tabindex="-1" role="dialog" aria-hidden="true" style="display: block; padding-right: 15px;">
        <div class="modal-dialog" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 50%; max-width: 500px; background: white; padding: 20px;">
            <div class="modal-content">
                <div class="modal-header">
                    <button @onclick="CerrarModalAgregar" type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                    <h4 class="modal-title">Agregar Nuevo Horario</h4>
                </div>
                <div class="modal-body">

                    <label>Nombre:</label>
                    <input @bind="NuevoHorario.cNombreHorario" class="form-control" placeholder="Ingrese el nombre" />

                    <label>Descripción:</label>
                    <input @bind="NuevoHorario.cDescripcionHorario" @oninput="ValidarDescripcion" class="form-control" placeholder="Ingrese la descripción" />
                    <span style="color: red;">@MensajeError</span>
                    <br/>
                    <label>Estado:</label>
                    <select @bind="NuevoHorario.bActivo" class="form-control">
                        <option value="ACTIVO">ACTIVO</option>
                        <option value="INACTIVO">INACTIVO</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button @onclick="ConfirmarAgregar" type="button" class="btn btn-outline btn-circle btn-sm blue" disabled="@BotonDeshabilitado">Guardar</button>
                    <button @onclick="CerrarModalAgregar" type="button" class="btn btn-outline btn-circle dark btn-sm red">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}



@inject IJSRuntime JS
@inject HttpClient Http
@using System.Text.Json
@using System.Text

@code {

    //PARA HACER UN SPINNER
    private bool cargando = true;
    //BOOL DE MODALES
    private bool mostrarModal = false;
    private bool mostrarModalActivar = false;
    private bool mostrarModalEditar = false;
    private bool mostrarModalAgregar = false;

    //PARA AGREGAR NUEVOS HORARIOS
    private Horarios NuevoHorario = new Horarios();

    //SECCION DE CODIGOS DE HORARIO
    private string codigoHorarioAEliminar = "";
    private string codigoHorarioAActivar = "";
    private string codigoHorarioAEditar = "";
    private string cNombreHorario = "";

    //PARA LA INICIALIZACIÓN
    private List<Horarios> horario;
    private string mensaje = "";
    private string profileToken = "prueba123";

    //VAMOS A CREAR UN OBJETO PARA PODER USARLO EN EDICIÓN
    private Horarios HorarioTemporal;

    //NECESARIOS PARA VALIDACION
    private bool BotonDeshabilitado { get; set; } = true;
    private string MensajeError { get; set; } = "";

    //PROCEDIMIENTO PARA VALIDAR LA DESCRIPCION
    private void ValidarDescripcion(ChangeEventArgs e)
    {
        var valor = e.Value.ToString();
        if (valor.Length < 10)
        {
            MensajeError = "La descripción debe tener al menos 10 caracteres.";
            BotonDeshabilitado = true;
        }
        else if (valor.Length > 100)
        {
            MensajeError = "La descripción debe tener menos de 100 caracteres.";
            BotonDeshabilitado = true;
        }
        else
        {
            MensajeError = "";
            BotonDeshabilitado = false;
        }
    }


    //PARA LLAMAR AL MODAL DE REGISTRAR UN NUEVO
    private void AbrirModalAgregar()
    {
        NuevoHorario = new Horarios(); 
        mostrarModalAgregar = true;
    }

    private void CerrarModalAgregar()
    {
        mostrarModalAgregar = false;
    }


    //PARA LLAMAR AL MODAL EDITAR
    private void AbrirModalEditar(Horarios Horario)
    {
        codigoHorarioAEditar = Horario.CodHorario;
        HorarioTemporal = new Horarios
            {
                CodHorario = Horario.CodHorario,
                cNombreHorario = Horario.cNombreHorario,
                cDescripcionHorario = Horario.cDescripcionHorario,
                bActivo = Horario.bActivo
            };
        mostrarModalEditar = true;
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
    }

    //PARA LLAMAR AL MODAL PARA DESACTIVAR
    private void AbrirModal(Horarios Horario)
    {
        codigoHorarioAEliminar = Horario.CodHorario;
        cNombreHorario = Horario.cNombreHorario;
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }


    //PARA LLAMAR AL MODAL DE ACTIVAR 
    private void AbrirModalActivar(Horarios Horario)
    {
        codigoHorarioAActivar = Horario.CodHorario;
        cNombreHorario = Horario.cNombreHorario;
        HorarioTemporal = Horario;
        mostrarModalActivar = true;
        StateHasChanged();
    }
    private void CerrarModalActivar()
    {
        mostrarModalActivar = false;
        StateHasChanged();
    }


    //FUNCION PARA PODER AGREGAR UN NUEVO REGISTRO A LA TABLA DE HORARIOS
    // Confirmar y guardar nuevo horario
    private async Task ConfirmarAgregar()
    {
        try
        {
            var apiLeon = new APILEON();
            NuevoHorario.bActivo=NuevoHorario.bActivo == "ACTIVO" ? "1" : "0";      
            var response = await apiLeon.APILEONPOST<Horarios>("/api/Recursos_Humanos/HorarioController", NuevoHorario);

            if (response != null)  
            {
                OnInitializedAsync();
                StateHasChanged();
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en la solicitud: {ex.Message}");
        }

        CerrarModalAgregar();
    }

    
    
    
    private async Task ConfirmarDesactivar()
    {
        try
        {
            var apiLeon = new APILEON();
            var response = await apiLeon.APILEONDEL<Horarios>("/api/Recursos_Humanos/HorarioController?CodHorario="+ codigoHorarioAEliminar );
            
            if (response != null)
            {
                var horarioAActualizar = horario.FirstOrDefault(h => h.CodHorario == codigoHorarioAEliminar);
                if (horarioAActualizar != null)
                {
                    horarioAActualizar.bActivo = "INACTIVO";
                    StateHasChanged();
                    
                    
                } 
                StateHasChanged();
            }
           
            StateHasChanged();
            
            OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en la solicitud: {ex.Message}");
        }
        CerrarModal();
    }

    
    private async Task ConfirmarActivar()
    {
        try
        {
            var apiLeon = new APILEON();
            HorarioTemporal.bActivo = "1";        
            var response = await apiLeon.APILEONPUT<Horarios>("/api/Recursos_Humanos/HorarioController?CodHorario="+HorarioTemporal.CodHorario, HorarioTemporal);
            
            if (response != null)
            {
                var horarioAActualizar = horario.FirstOrDefault(h => h.CodHorario == codigoHorarioAActivar);
                if (horarioAActualizar != null)
                {
                    horarioAActualizar.bActivo = "ACTIVO";
                    StateHasChanged();
                    OnInitializedAsync();
                }
                StateHasChanged();
            }
            StateHasChanged();
            OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en la solicitud: {ex.Message}");
        }
        CerrarModalActivar();
    }

    private async Task ConfirmarEditar()
    {
        try
        {
            var apiLeon = new APILEON();
            if (HorarioTemporal.bActivo == "ACTIVO")
            { HorarioTemporal.bActivo = "1"; }
            else { HorarioTemporal.bActivo = "0"; }
             var response = await apiLeon.APILEONPUT<Horarios>("/api/Recursos_Humanos/HorarioController?CodHorario=" + HorarioTemporal.CodHorario, HorarioTemporal);
            if (response != null)
            {
                var horarioAActualizar = horario.FirstOrDefault(h => h.CodHorario == codigoHorarioAEditar);
                if (horarioAActualizar != null)
                {
                    horarioAActualizar.cNombreHorario = HorarioTemporal.cNombreHorario;
                    horarioAActualizar.cDescripcionHorario = HorarioTemporal.cDescripcionHorario;
                    horarioAActualizar.bActivo = HorarioTemporal.bActivo == "1" ? "ACTIVO" : "INACTIVO";
                    StateHasChanged();
                    OnInitializedAsync();
                }
                StateHasChanged();
            }
            StateHasChanged();
            OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en la solicitud: {ex.Message}");
        }
        CerrarModalEditar();
    }

    
    protected override async Task OnInitializedAsync()
    {
        var apiLeon = new APILEON(); 
        cargando = false; 
        try
        {
            horario = await apiLeon.APILEONGET<List<Horarios>>("/api/Recursos_Humanos/HorarioController");

            if (horario != null && horario.Count > 0)
            {
                mensaje = $"Horarios obtenidos correctamente ✅ Se obtuvieron {horario.Count} registros.";
                Console.WriteLine($"Cantidad de horarios: {horario.Count}");
                var data = System.Text.Json.JsonSerializer.Serialize(horario);
                StateHasChanged();
            }
            else
            {
                mensaje = "Error al obtener los horarios ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }
    }
    
    
    public class Horarios
    {
        public string CodHorario { get; set; } = "";
        public string cNombreHorario { get; set; } = "";
        public string cDescripcionHorario { get; set; } = "";
        public string bActivo { get; set; } = "";
    }
}
