@page "/Anexo5-DeudoresProvisiones"
@using LeonXIIICore.Pages.Utilitarios
@using Models.Sistema
@using Clases.Sistema
@using Controllers.Sistema
@using Models.Reportes_Anexos_SBS
@using System.Security.Claims
@using LeonXIIICore
@using System.Text.Json
@using System.Text
@using OfficeOpenXml;
@using OfficeOpenXml.Style;


@inherits MainLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClaimsService ClaimsService
@inject IJSRuntime JS
@inject HttpClient Http
@implements IDisposable

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .spinner-content {
        text-align: center;
        color: #333;
    }

    .alert {
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4caf50;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        opacity: 1;
        transition: opacity 0.5s ease-in-out;
        z-index: 1001;
    }
</style>


@if (cargando)
{
    <div class="loading-overlay">
        <div class="spinner-content">
            <img src="../assets/global/img/loading-spinner-blue.gif" alt="loading" />
            <p>Cargando datos del Anexo 13...</p>
        </div>
    </div>
}


@if (Auditoria != null && Auditoria.Count > 0)
{

    <div class="row">
        <div class="col-md-12">
            <div class="portlet light portlet-fit">
                <div class="header-grupo-plantilla">
                    <div class="header-content">
                        <div class="caption mb-0">
                            <i class="icon-settings"></i>
                            <span class="titulo-seccion-plantilla">
                                Informe de Clasificación de Deudores y Provisiones
                            </span>
                        </div>
                    </div>

                    <div class="header-content">
                        <div class="actions">
                        </div>
                    </div>
                </div>
                <div class="blazor-content portlet-body">
                    <div class="portlet-body">

                        <TablaGenerica TItem="AnexoAuditoria"
                                   Datos="Auditoria"
                                   OnDescargar="Descargar"
                                   OnAuditoria="Auditar" />

                    </div>
                    <ModalAuditoria TItem="AuditoriaModel"
                                Title="Auditoría de Descargas"
                                Datos="DatosAuditoria"
                                Visible="ModalVisible"
                                OnClose="CerrarModal"
                                OnDescargar="DescargarAudit" />
                </div>
            </div>
        </div>
    </div>
}

@code {

    private string IdUser;

    private List<AnexoAuditoria> Auditoria;
    private bool cargando = true;
    private string mensaje = "";
    private bool _isDisposed = false;
    private ElementReference alertDiv;

    private async Task Descargar(AnexoAuditoria item) { }

    #region "AUDITORIA"
    private bool ModalVisible = false;
    private List<AuditoriaModel> DatosAuditoria = new();
    private void MostrarModalAuditoria() => ModalVisible = true;

    private async Task Auditar(AnexoAuditoria item)
    {
        var apiLeon = new APILEON();
        var datos = await apiLeon.APILEONGET<Respuesta<List<AuditoriaModel>>>("/api/Reportes_Anexos_SBS/Auditoria/AuditoriaxCod?Operacion=2&NombreTabla=BALANCECOMPROBACION&Codigo=" + item.Codigo);
        DatosAuditoria = datos.Data;
        if (DatosAuditoria != null && DatosAuditoria.Count > 0)
        {
            mensaje = $"Anexo 13 obtenidos correctamente ✅ Se obtuvieron {DatosAuditoria.Count} registros.";
        }
        else
        {
            mensaje = "Error al obtener los Anexos ❌";
        }
        Console.WriteLine($"Auditando {item.Codigo}");
        MostrarModalAuditoria();
    }

    private void CerrarModal()
    {
        ModalVisible = false;
    }

    private async Task DescargarAudit(AuditoriaModel item)
    {

        string urlExcel = $"/api/export/ExportExcelAnexo13?codigo={item.CODIGO}&anio={item.ANIO}&mes={item.MES}&IdUser=BetLla";
        await JS.InvokeVoidAsync("descargarArchivo", urlExcel);


        string url = $"/api/export/ExportTxtAnexo13?codigo={item.CODIGO}&anio={item.ANIO}&mes={item.MES}";
        await JS.InvokeVoidAsync("descargarArchivo", url);

        await OnInitializedAsync();
        Console.WriteLine($"Descargando {item.CODIGO}");

    }
    #endregion


    protected override async Task OnInitializedAsync()
    {
        var apiLeon = new APILEON();

        try
        {
            await ClaimsService.InitializeAsync();
            IdUser = ClaimsService.GetDatoTrabajadorByIdUser("SIdUser");

            var Prueba = await apiLeon.APILEONGET<Respuesta<List<AnexoAuditoria>>>("/api/Reportes_Anexos_SBS/Auditoria?Operacion=1&NombreTabla=Anexo5A");
            Auditoria = Prueba.Data;
            if (Auditoria != null && Auditoria.Count > 0)
            {
                mensaje = $"Balance de Comprobacion obtenidos correctamente ✅ Se obtuvieron {Auditoria.Count} registros.";
            }
            else
            {
                mensaje = "Error al obtener los horarios ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }

        cargando = false;
        if (!_isDisposed)
            StateHasChanged();
    }


    public void Dispose()
    {
        _isDisposed = true;
    }




}
