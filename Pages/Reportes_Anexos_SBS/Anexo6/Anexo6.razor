@using LeonXIIICore.Pages.Utilitarios
@using Models.Sistema
@using Clases.Sistema
@using Controllers.Sistema
@using Models.Reportes_Anexos_SBS
@using System.Text.Json
@using System.Text
@using OfficeOpenXml;
@using OfficeOpenXml.Style;

@page "/Anexo6"
@inherits MainLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClaimsService ClaimsService
@inject IJSRuntime JS
@inject HttpClient Http
@implements IDisposable

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .spinner-content {
        text-align: center;
        color: #333;
    }

    .alert {
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4caf50;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        opacity: 1;
        transition: opacity 0.5s ease-in-out;
        z-index: 1001;
    }
</style>

@if (cargando)
{
    <div class="loading-overlay">
        <div class="spinner-content">
            <img src="../assets/global/img/loading-spinner-blue.gif" alt="loading" />
            <p>Cargando datos del Anexo 6...</p>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert" @ref="alertDiv">@mensaje</div>
}

@if (LAnexo6Model != null && LAnexo6Model.Count > 0)
{

    <div class="row">
        <div class="col-md-12">
            <div class="portlet light portlet-fit">
                <div class="header-grupo-plantilla">
                    <div class="header-content">
                        <div class="caption mb-0">
                            <i class="icon-settings"></i>
                            <span class="titulo-seccion-plantilla">
                                Anexo 6
                            </span>
                        </div>
                    </div>

                    <div class="header-content">
                        <div class="actions">
                        </div>
                    </div>
                </div>


                <div class="blazor-content portlet-body">
                    <div class="portlet-body">
                        Contenido de la página
                    </div>
                </div>



                <div class="blazor-content portlet-body">
                    <div class="portlet-body">
                        @{
                            int anioInicio = 2019;
                            int anioActual = DateTime.Now.Year;
                        }

                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <strong>Seleccione Periodo</strong>
                            </div>
                            <div class="panel-body">
                                <div class="row" id="event_period">
                                    <div class="col-xs-4 col-sm-3">
                                        <div class="form-group">
                                            <label for="anio">Año</label>
                                            <select asp-for="AnioSeleccionado" class="form-control" id="anio" @bind="AnioSeleccionado">
                                                @for (int anio = anioActual; anio >= anioInicio; anio--)
                                                {
                                                    <option value="@anio">@anio</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-xs-4 col-sm-3">
                                        <div class="form-group">
                                            <label for="mes">Mes</label>
                                            <select class="form-control" id="mes" @bind="MesSeleccionado">
                                                <option value="1">Enero</option>
                                                <option value="2">Febrero</option>
                                                <option value="3">Marzo</option>
                                                <option value="4">Abril</option>
                                                <option value="5">Mayo</option>
                                                <option value="6">Junio</option>
                                                <option value="7">Julio</option>
                                                <option value="8">Agosto</option>
                                                <option value="9">Septiembre</option>
                                                <option value="10">Octubre</option>
                                                <option value="11">Noviembre</option>
                                                <option value="12">Diciembre</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-xs-4 col-sm-2">
                                        <div class="form-group">
                                            <label style="visibility: hidden;">Generar</label>
                                            <button type="button" @onclick="OnGenerar" class="btn btn-success btn-block">
                                                <i class="fa fa-file-archive-o"></i> Generar
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <TablaGenerica TItem="AnexoAuditoria"
                                   Datos="LAnexo6Model"
                                   OnDescargar="Descargar"
                                   OnAuditoria="Auditar" />

                        <ModalAuditoria TItem="AuditoriaModel"
                                    Title="Auditoría de Descargas"
                                    Datos="DatosAuditoria"
                                    Visible="ModalVisible"
                                    OnClose="CerrarModal"
                                    OnDescargar="DescargarAudit" />
                    



                    </div>
                </div>
            </div>
        </div>
    </div>
}



@code {

    private int AnioSeleccionado { get; set; } = DateTime.Now.Year;
    private int MesSeleccionado { get; set; } = DateTime.Now.Month;
    private string dato;
    private List<AnexoAuditoria> LAnexo6Model;

    private string mensaje = "";
    private bool _isDisposed = false;
    private bool cargando = true;
    private ElementReference alertDiv;


    private async Task OnGenerar()
    {
        //string urlExcel = $"/api/export/GenerarExcelAnexo6?anio={AnioSeleccionado}&mes={MesSeleccionado}&IdUser=BetLla";
        //await JS.InvokeVoidAsync("descargarArchivo", urlExcel);

        //await Task.Delay(10000);

        //string url = $"/api/export/ExportTxtAnexo13?anio={AnioSeleccionado}&mes={MesSeleccionado}";
        //await JS.InvokeVoidAsync("descargarArchivo", url);

        await OnInitializedAsync();

    }


    private async Task Descargar(AnexoAuditoria item)
    {

        string urlExcel = $"/api/export/ExportExcelAnexo6?codigo={item.Codigo}&anio={item.Anio}&mes={item.Mes}&IdUser=" + dato;
        await JS.InvokeVoidAsync("descargarArchivo", urlExcel);

        string url = $"/api/export/ExportTxtAnexo6?codigo={item.Codigo}&anio={item.Anio}&mes={item.Mes}";
        await JS.InvokeVoidAsync("descargarArchivo", url);

        await OnInitializedAsync();
        Console.WriteLine($"Descargando {item.Nombre}");
    }


    #region "SECCION DE AUDITORIA"
    private bool ModalVisible = false;
    private void MostrarModalAuditoria() => ModalVisible = true;
    private List<AuditoriaModel> DatosAuditoria = new();

    private async Task Auditar(AnexoAuditoria item)
    {
        var apiLeon = new APILEON();
        var datos = await apiLeon.APILEONGET<Respuesta<List<AuditoriaModel>>>("/api/Reportes_Anexos_SBS/Auditoria/AuditoriaxCod?Operacion=2&NombreTabla=Anexo6&CodAnexo=" + item.Codigo);
        DatosAuditoria = datos.Data;
        if (DatosAuditoria != null && DatosAuditoria.Count > 0)
        {
            mensaje = $"Anexo 6 obtenidos correctamente ✅ Se obtuvieron {DatosAuditoria.Count} registros.";
        }
        else
        {
            mensaje = "Error al obtener los Anexos ❌";
        }
        Console.WriteLine($"Auditando {item.Codigo}");
        MostrarModalAuditoria();
    }

    private async Task DescargarAudit(AuditoriaModel item)
    {

        string urlExcel = $"/api/export/ExportExcelAnexo13?codigo={item.CODIGO}&anio={item.ANIO}&mes={item.MES}&IdUser="+dato;
        await JS.InvokeVoidAsync("descargarArchivo", urlExcel);


        string url = $"/api/export/ExportTxtAnexo13?codigo={item.CODIGO}&anio={item.ANIO}&mes={item.MES}";
        await JS.InvokeVoidAsync("descargarArchivo", url);

        await OnInitializedAsync();
        Console.WriteLine($"Descargando {item.CODIGO}");

    }

    private void CerrarModal()
    {
        ModalVisible = false;
    }

    #endregion 


    public void Dispose()
    {
        _isDisposed = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var apiLeon = new APILEON();

        try
        {
            await ClaimsService.InitializeAsync();
            dato = ClaimsService.GetDatoTrabajadorByIdUser("SIdUser");
            var datos = await apiLeon.APILEONGET<Respuesta<List<AnexoAuditoria>>>("/api/Reportes_Anexos_SBS/Auditoria?Operacion=1&NombreTabla=Anexo6");
            LAnexo6Model = datos.Data;
            if (LAnexo6Model != null && LAnexo6Model.Count > 0)
            {
                mensaje = $"Anexo 6 obtenidos correctamente ✅ Se obtuvieron {LAnexo6Model.Count} registros.";
            }
            else
            {
                mensaje = "Error al obtener los horarios ❌";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error de conexión ❌";
            Console.WriteLine(ex.Message);
        }

        cargando = false;
        if (!_isDisposed)
            StateHasChanged();
    }

}
