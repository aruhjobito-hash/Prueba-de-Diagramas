@attribute [AllowAnonymous]
@page "/angular"
@page "/angular/{*pageRoute}"
@inject IJSRuntime JSRuntime

<HeadContent>
    <style>
        #angular-frame {
            transition: opacity 0.3s ease-in;
        }

        .iframe-loaded {
            opacity: 1;
        }
    </style>
</HeadContent>

<LoadingOverlay @ref="loadingOverlay" IsLoaded="iframeLoaded" />

<iframe id="angular-frame"
        src="@AngularUrl"
        width="100%"
        height="720px"
        max-height="100%"
        frameborder="0"
        z-index="99"
        style="border: none; @(iframeLoaded ? "opacity: 1;" : "opacity: 0;")"
        @onload="OnIframeLoaded"
        @onerror="OnIframeError">
</iframe>

@code {
    [Parameter] public string? pageRoute { get; set; }
    private LoadingOverlay loadingOverlay;
    private bool iframeLoaded = false;
    private bool hasError = false;

    protected override void OnParametersSet()
    {
        // Reset loading state when route changes
        iframeLoaded = false;
        hasError = false;
        loadingOverlay?.SetLoadingState(false);
        StateHasChanged();
    }

    private string AngularUrl =>
        string.IsNullOrEmpty(pageRoute)
        ? "/angular/index.html"
        : $"/angular/index.html#{pageRoute}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Preload the logo image
            await PreloadImage("/img/LogoCompleto.png");
        }
    }

    private async Task OnIframeLoaded()
    {
        // Wait minimum display time (1 second) for better UX
        await Task.Delay(1500);

        if (!hasError)
        {
            iframeLoaded = true;
            StateHasChanged();

            // Ensure smooth transition
            await JSRuntime.InvokeVoidAsync("eval",
                "document.getElementById('angular-frame').classList.add('iframe-loaded');");
        }
    }

    private async Task OnIframeError()
    {
        hasError = true;
        iframeLoaded = true; // Hide loader

        // Handle error (show message, redirect, etc.)
        await JSRuntime.InvokeVoidAsync("alert", "Failed to load Angular application");

        StateHasChanged();
    }

    private async Task PreloadImage(string imageUrl)
    {
        await JSRuntime.InvokeVoidAsync("eval",
            $"new Promise((resolve) => {{ const img = new Image(); img.src = '{imageUrl}'; img.onload = resolve; img.onerror = resolve; }})");
    }
}