@typeparam TItem
@using System.Reflection

<div class="form-inline" style="margin-bottom: 15px; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;">

    <div class="form-group" style="margin-bottom: 10px;">
        <input type="text" class="form-control input-sm" style="min-width: 250px;" placeholder="Buscar..."
               value="@Filtro"
               @oninput="OnFiltroChanged" />
    </div>  

</div>



<table class="blazor-tabla-requerimientos">
    <thead>
        <tr>
            @foreach (var col in Columnas)
            {
                if (col == "Anio")
                {
                    <th class="text-center">Año</th>
                }else{
                    <th class="text-center">@col</th>
                }
            
            }
            <th class="text-center">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in DatosPaginados)
        {
            <tr>
                @foreach (var propiedad in Props)
                {
                    <td class="text-center">@(propiedad.GetValue(item))</td>
                }
                <td class="text-center">
                    @if (OnDescargar.HasDelegate)
                    {
                        <button class="btn btn-outline btn-circle btn-sm blue" @onclick="() => OnDescargar.InvokeAsync(item)"> <i class="fa fa-download"></i> Descargar</button>
                    }
                    @if (OnAuditoria.HasDelegate)
                    {
                        <button class="btn btn-outline btn-circle dark btn-sm green-jungle" @onclick="() => OnAuditoria.InvokeAsync(item)"> <i class="fa fa-archive"></i> Auditoría</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


<div class="form-inline" style="margin-bottom: 15px; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;">



    <div class="form-group" style="margin-bottom: 10px;">
        <label class="control-label" style="margin-right: 5px;">Mostrar</label>
        <select class="form-control input-sm" style="width: auto;" @bind="FilasPorPagina">
            <option value="5">5 filas</option>
            <option value="10">10 filas</option>
            <option value="15">15 filas</option>
            <option value="20">20 filas</option>
        </select>
    </div>

    <div class="form-group" style="margin-bottom: 10px;">
        <div class="mt-3">
            <button class="btn btn-sm btn-secondary" @onclick="AnteriorPagina" disabled="@(!PuedeRetroceder)"><i class="fa fa-arrow-left"></i> </button>
            <span class="mx-2">Página @PaginaActual de @TotalPaginas</span>
            <button class="btn btn-sm btn-secondary" @onclick="SiguientePagina" disabled="@(!PuedeAvanzar)"> <i class="fa fa-arrow-right"></i></button>
        </div>
    </div>

</div>




@code {
    [Parameter] public List<TItem> Datos { get; set; } = new();
    [Parameter] public EventCallback<TItem> OnDescargar { get; set; }
    [Parameter] public EventCallback<TItem> OnAuditoria { get; set; }

    private int PaginaActual = 1;
    private int FilasPorPagina = 5;

    private List<TItem> DatosFiltrados => string.IsNullOrWhiteSpace(Filtro)
        ? Datos
        : Datos.Where(d => Props.Any(p => (p.GetValue(d)?.ToString() ?? "").Contains(Filtro, StringComparison.OrdinalIgnoreCase))).ToList();

    private List<TItem> DatosPaginados => DatosFiltrados
        .Skip((PaginaActual - 1) * FilasPorPagina)
        .Take(FilasPorPagina)
        .ToList();

   

    private List<string> Columnas => Props.Select(p => p.Name).ToList();
    private List<PropertyInfo> Props => typeof(TItem).GetProperties(BindingFlags.Public | BindingFlags.Instance).ToList();

    

    private string _filtro = "";
    public string Filtro
    {
        get => _filtro;
        set
        {
            if (_filtro != value)
            {
                _filtro = value;
                PaginaActual = 1; 
            }
        }
    }

    private void OnFiltroChanged(ChangeEventArgs e)
    {
        Filtro = e.Value?.ToString() ?? "";
    }



    private int TotalPaginas => (int)Math.Ceiling((double)DatosFiltrados.Count / FilasPorPagina);
    private bool PuedeAvanzar => PaginaActual < TotalPaginas;
    private bool PuedeRetroceder => PaginaActual > 1;

    private void SiguientePagina()
    {
        if (PuedeAvanzar) PaginaActual++;
    }

    private void AnteriorPagina()
    {
        if (PuedeRetroceder) PaginaActual--;
    }

}