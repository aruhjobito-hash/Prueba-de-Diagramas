@using Clases.Sistema
@inherits LayoutComponentBase
@inject JSInteropHelper JsInteropHelper
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <PageTitle>LeonXIIICore</PageTitle>

        <!-- BEGIN PAGE LEVEL STYLES -->
        <link href="assets/apps/css/todo.min.css" rel="stylesheet" type="text/css" defer />
        <!-- END PAGE LEVEL STYLES -->
        <!-- BEGIN THEME LAYOUT STYLES -->
        <link href="/assets/layouts/layout2/css/layout.min.css" rel="stylesheet" type="text/css" defer />
        <link href="/assets/layouts/layout2/css/themes/default.min.css" rel="stylesheet" type="text/css" id="style_color" defer />
        <link href="/assets/layouts/layout2/css/custom.min.css" rel="stylesheet" type="text/css" defer />
        <link rel="stylesheet" href="Blazor-file.css" class="blazor-link">

        <!-- END THEME LAYOUT STYLES -->
        <TopBar />
        <!-- BEGIN HEADER & CONTENT DIVIDER -->
        <div class="clearfix"> </div>
        <!-- END HEADER & CONTENT DIVIDER -->
        <div class="page-container sidebar-background">

            <SidebarBK />
            <div class="page-content-wrapper max-height=640px">

                <!-- BEGIN CONTENT BODY -->
                <div class="page-content">
                    <!-- BEGIN PAGE HEADER-->
                    <!-- BEGIN THEME PANEL -->
                    <Theme />

                    <div class="row">
                        <div class="col-md-12">
                            <div class="todo-ui">
                                <div class="portlet light" style="position:relative; min-height:80vh">
@*                                     @if (!IsAngularRoute)
                                    {
                                        <LoadingOverlay @ref="loadingOverlay" />
                                        @if(showContent)
                                                                        {
                                            <div style="opacity: @(contentLoaded ? "1" : "0"); transition: opacity 0.5s ease"> *@
                                                @Body
@*                                             </div>
                                        }
                                    }
                                    else
                                    {
                                        @Body
                                    } *@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="page-footer">
            <div class="page-footer-inner">
                2025 &copy; CACLEONXIII.
            </div>
        </div>
    </Authorized>
</AuthorizeView>
<style>
    /* Disable scrolling on the entire page */
html, body {
    overflow: hidden; /* This disables scrolling */
}

/* Main layout container */
.page-container {
    overflow: hidden; /* Prevent scrolling */
}

/* Sidebar styling - fixed position */
.sidebar-background {
    overflow-y: auto; /* Allow scrolling only in sidebar if needed */
}

/* Main content area */
.page-content-wrapper {
    overflow: hidden;
}

/* Content container - scrollable area */
.page-content {
    overflow-y: auto; /* Only this area will scroll */   
}

/* 
.page-footer {
    position: fixed;
   
} */
    .blazor-content-wrapper {
        position: relative;
        min-height: 80vh;
    }

    .blazor-overlay-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .blazor-content {
        position: relative;
        z-index: 1000;
        height: 100%;
    }

</style>
@code {
    private LoadingOverlay loadingOverlay;
    private bool showContent = false;
    private bool contentLoaded = false;
    private bool IsAngularRoute => NavigationManager.Uri.Contains("/angular/");

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        await InitializeLoadingState();
    }

    private async Task InitializeLoadingState()
    {
        if (!IsAngularRoute)
        {
            // Aqui reseteamos el estado de carga al iniciar
            showContent = false;
            contentLoaded = false;
            StateHasChanged();

            // Mostramos el overlay de carga al inicio
            loadingOverlay?.Show();

            // Aqui se configura el retraso de carga que se desea simular
            await Task.Delay(2000);
            showContent = true;
            StateHasChanged();

            // Añadimos un pequeño retraso para simular la carga de contenido
            await Task.Delay(300);
            contentLoaded = true;
            loadingOverlay?.Hide();
            StateHasChanged();
        }
    }

    private async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        // Corremos nuevamente por cada cambio de ruta
        await InitializeLoadingState();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsInteropHelper.InvokeLayoutInit();
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}
