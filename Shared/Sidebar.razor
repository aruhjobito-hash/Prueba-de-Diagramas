@using LeonXIIICore.Models.Sistema
@inject MenuService MenuService
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="page-sidebar-wrapper">
    <!-- END SIDEBAR -->
    <!-- DOC: Set data-auto-scroll="false" to disable the sidebar from auto scrolling/focusing -->
    <!-- DOC: Change data-auto-speed="200" to adjust the sub menu slide up/down speed -->
    <div class="page-sidebar navbar-collapse collapse">
        <ul class="page-sidebar-menu  page-header-fixed page-sidebar-menu-hover-submenu " data-keep-expanded="false" data-auto-scroll="true" data-slide-speed="200">
            <li class="nav-item start ">
                <a href="javascript:;" class="nav-link nav-toggle">
                    <div class="form-group">
                        <select class="form-control" @bind="selectedRole" @bind:event="onchange">
                            @foreach (var role in roles)
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </div>
                </a>
            </li>

            @if (MenuData != null)
            {
                @foreach (var menu in MenuData)
                {
                    <li class="nav-item start ">
                        <a href="javascript:;" class="nav-link nav-toggle">
                            <i class="icon-folder"></i>
                            <span class="title">@menu.Menu</span>
                            <span class="arrow"></span>
                        </a>
                        <ul class="sub-menu">
                            @foreach (var sub in menu.SubMenu)
                            {
                                if (sub.Tipo == "Menu")
                                {
                                    <li class="nav-item start ">
                                        <a href="@NavigationManager.Uri" class="nav-link nav-toggle">
                                            <i class="icon-docs"></i>
                                            <span class="title">@sub.NombreSubMenu</span>
                                            <span class="arrow"></span>
                                        </a>
                                        <ul class="sub-menu">
                                            @foreach (var item in sub.Desglose)
                                            {
                                                <li class="nav-item start ">
                                                    <a href="@item.Funcion" class="nav-link" @onclick="@(() => ExecuteFunction(item.Funcion))">
                                                        <i class="icon-arrow-right"></i>
                                                        <span class="title">@item.Name</span>
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    </li>
                                }
                                else if (sub.Tipo == "SubMenu")
                                {
                                    <li class="nav-item start ">
                                        <a href="@sub.Funcion" class="nav-link" @onclick="@(() => ExecuteFunction(sub.Funcion))">
                                            <i class="icon-docs"></i>
                                            <span class="title">@sub.NombreSubMenu</span>
                                        </a>
                                    </li>
                                }
                            }
                        </ul>
                    </li>
                }
            }
            else
            {
                <li class="nav-item start ">
                    <a href="home" class="nav-link nav-toggle">
                        <i class="icon-home"></i>
                        <span class="title">Home</span>
                        <span class="arrow"></span>
                    </a>
                </li>
            }

        </ul>
    </div>
    <!-- END SIDEBAR -->
</div>

@code {
    private List<MenuClass> MenuData = new();
    private List<string> roles = new();
    private List<string> IdUser = new();
    private List<string> DatoTrabajador = new();
    private string iduser;
    private string _selectedRole;
    private bool _initializing = true;

    private string selectedRole
    {
        get => _selectedRole;
        set
        {
            if (_selectedRole != value)
            {
                _selectedRole = value;
                if (!_initializing)
                {
                    _ = CargarMenus(_selectedRole); // Fire-and-forget async
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Get all role claims
            roles = user.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();

            // Get all DataTrabajador
            DatoTrabajador = user.Claims
                .Where(c => c.Type == ClaimTypes.UserData)
                .Select(c => c.Value)
                .ToList();

            IdUser = user.Claims
                .Where(c => c.Type == ClaimTypes.Name)
                .Select(c => c.Value)
                .ToList();

            if (IdUser.Any())
            {
                iduser = IdUser.First();
            }

            if (roles.Any())
            {
                selectedRole = roles.First(); // Assign without triggering reload
                await CargarMenus(selectedRole); // Load sidebar menus
            }
        }

        _initializing = false;
        // StateHasChanged(); // Refresh UI after initial load
    }

    private async Task CargarMenus(string perfil)
    {
        MenuData = await MenuService.ObtenerMenuAsync(perfil, iduser);
        if (MenuData is null || MenuData.Count()==0)
        {
            perfil = roles.Last();
            selectedRole = roles.Last();
            MenuData = await MenuService.ObtenerMenuAsync(perfil, iduser);            
        }
        StateHasChanged(); // Ensure sidebar updates after loading
    }

    private void ExecuteFunction(string funcion)
    {
        Console.WriteLine($"Ejecutando: {funcion}");
        // Aquí implementas la lógica real
    }
}
